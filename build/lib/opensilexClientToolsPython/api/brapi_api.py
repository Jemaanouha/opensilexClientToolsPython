# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: INSTANCE-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from opensilexClientToolsPython.api_client import ApiClient


class BRAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_calls(self, **kwargs):  # noqa: E501
        """Check the available BrAPI calls  # noqa: E501

        Check the available BrAPI calls  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calls(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number
        :param int page_size: Page size
        :param str data_type: datatype
        :return: list[Call]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_calls_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_calls_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_calls_with_http_info(self, **kwargs):  # noqa: E501
        """Check the available BrAPI calls  # noqa: E501

        Check the available BrAPI calls  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calls_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: Page number
        :param int page_size: Page size
        :param str data_type: datatype
        :return: list[Call]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size', 'data_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_calls" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_calls`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_calls`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'data_type' in params:
            query_params.append(('dataType', params['data_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/brapi/v1/calls', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Call]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_germplasm_by_search(self, **kwargs):  # noqa: E501
        """Submit a search request for germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_by_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str germplasm_db_id: Search by germplasmDbId
        :param str germplasm_pui: Search by germplasmPUI
        :param str germplasm_name: Search by germplasmName
        :param str common_crop_name: Search by commonCropName
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: GermplasmDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_germplasm_by_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_by_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_germplasm_by_search_with_http_info(self, **kwargs):  # noqa: E501
        """Submit a search request for germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_by_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str germplasm_db_id: Search by germplasmDbId
        :param str germplasm_pui: Search by germplasmPUI
        :param str germplasm_name: Search by germplasmName
        :param str common_crop_name: Search by commonCropName
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: GermplasmDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['germplasm_db_id', 'germplasm_pui', 'germplasm_name', 'common_crop_name', 'page', 'page_size', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm_by_search" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_germplasm_by_search`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_germplasm_by_search`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'germplasm_db_id' in params:
            query_params.append(('germplasmDbId', params['germplasm_db_id']))  # noqa: E501
        if 'germplasm_pui' in params:
            query_params.append(('germplasmPUI', params['germplasm_pui']))  # noqa: E501
        if 'germplasm_name' in params:
            query_params.append(('germplasmName', params['germplasm_name']))  # noqa: E501
        if 'common_crop_name' in params:
            query_params.append(('commonCropName', params['common_crop_name']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/brapi/v1/germplasm', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GermplasmDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_observation_units(self, study_db_id, **kwargs):  # noqa: E501
        """List all the observation units measured in the study.  # noqa: E501

        List all the observation units measured in the study.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_observation_units(study_db_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_db_id: studyDbId (required)
        :param str authorization: Authentication token (required)
        :param str observation_level: observationLevel
        :param int page_size: pageSize
        :param int page: page
        :param str accept_language: Request accepted language
        :return: list[ObservationUnitDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_observation_units_with_http_info(study_db_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_observation_units_with_http_info(study_db_id, **kwargs)  # noqa: E501
            return data

    def get_observation_units_with_http_info(self, study_db_id, **kwargs):  # noqa: E501
        """List all the observation units measured in the study.  # noqa: E501

        List all the observation units measured in the study.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_observation_units_with_http_info(study_db_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_db_id: studyDbId (required)
        :param str authorization: Authentication token (required)
        :param str observation_level: observationLevel
        :param int page_size: pageSize
        :param int page: page
        :param str accept_language: Request accepted language
        :return: list[ObservationUnitDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_db_id', 'observation_level', 'page_size', 'page', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_observation_units" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'study_db_id' is set
        if ('study_db_id' not in params or
                params['study_db_id'] is None):
            raise ValueError("Missing the required parameter `study_db_id` when calling `get_observation_units`")  # noqa: E501

        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_observation_units`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_observation_units`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'study_db_id' in params:
            path_params['studyDbId'] = params['study_db_id']  # noqa: E501

        query_params = []
        if 'observation_level' in params:
            query_params.append(('observationLevel', params['observation_level']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/brapi/v1/studies/{studyDbId}/observationunits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ObservationUnitDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_observation_variables(self, study_db_id, **kwargs):  # noqa: E501
        """List all the observation variables measured in the study.  # noqa: E501

        List all the observation variables measured in the study.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_observation_variables(study_db_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_db_id: studyDbId (required)
        :param str authorization: Authentication token (required)
        :param int page_size: pageSize
        :param int page: page
        :param str accept_language: Request accepted language
        :return: list[ObservationVariableDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_observation_variables_with_http_info(study_db_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_observation_variables_with_http_info(study_db_id, **kwargs)  # noqa: E501
            return data

    def get_observation_variables_with_http_info(self, study_db_id, **kwargs):  # noqa: E501
        """List all the observation variables measured in the study.  # noqa: E501

        List all the observation variables measured in the study.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_observation_variables_with_http_info(study_db_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_db_id: studyDbId (required)
        :param str authorization: Authentication token (required)
        :param int page_size: pageSize
        :param int page: page
        :param str accept_language: Request accepted language
        :return: list[ObservationVariableDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_db_id', 'page_size', 'page', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_observation_variables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'study_db_id' is set
        if ('study_db_id' not in params or
                params['study_db_id'] is None):
            raise ValueError("Missing the required parameter `study_db_id` when calling `get_observation_variables`")  # noqa: E501

        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_observation_variables`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_observation_variables`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'study_db_id' in params:
            path_params['studyDbId'] = params['study_db_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/brapi/v1/studies/{studyDbId}/observationvariables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ObservationVariableDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_observations(self, study_db_id, **kwargs):  # noqa: E501
        """Get the observations associated to a specific study  # noqa: E501

        Get the observations associated to a specific study  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_observations(study_db_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_db_id: studyDbId (required)
        :param str authorization: Authentication token (required)
        :param list[str] observation_variable_db_ids: observationVariableDbIds
        :param int page_size: pageSize
        :param int page: page
        :param str accept_language: Request accepted language
        :return: list[ObservationDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_observations_with_http_info(study_db_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_observations_with_http_info(study_db_id, **kwargs)  # noqa: E501
            return data

    def get_observations_with_http_info(self, study_db_id, **kwargs):  # noqa: E501
        """Get the observations associated to a specific study  # noqa: E501

        Get the observations associated to a specific study  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_observations_with_http_info(study_db_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_db_id: studyDbId (required)
        :param str authorization: Authentication token (required)
        :param list[str] observation_variable_db_ids: observationVariableDbIds
        :param int page_size: pageSize
        :param int page: page
        :param str accept_language: Request accepted language
        :return: list[ObservationDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_db_id', 'observation_variable_db_ids', 'page_size', 'page', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_observations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'study_db_id' is set
        if ('study_db_id' not in params or
                params['study_db_id'] is None):
            raise ValueError("Missing the required parameter `study_db_id` when calling `get_observations`")  # noqa: E501

        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_observations`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_observations`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'study_db_id' in params:
            path_params['studyDbId'] = params['study_db_id']  # noqa: E501

        query_params = []
        if 'observation_variable_db_ids' in params:
            query_params.append(('observationVariableDbIds', params['observation_variable_db_ids']))  # noqa: E501
            collection_formats['observationVariableDbIds'] = 'multi'  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/brapi/v1/studies/{studyDbId}/observations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ObservationDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_studies(self, **kwargs):  # noqa: E501
        """Retrieve studies information  # noqa: E501

        Retrieve studies information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_studies(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str study_db_id: Search by studyDbId
        :param str active: Filter active status true/false
        :param str sort_by: Name of the field to sort by: studyDbId, active
        :param str sort_order: Sort order direction - ASC or DESC
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[StudyDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_studies_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_studies_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_studies_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve studies information  # noqa: E501

        Retrieve studies information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_studies_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str study_db_id: Search by studyDbId
        :param str active: Filter active status true/false
        :param str sort_by: Name of the field to sort by: studyDbId, active
        :param str sort_order: Sort order direction - ASC or DESC
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[StudyDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_db_id', 'active', 'sort_by', 'sort_order', 'page', 'page_size', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_studies" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_studies`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_studies`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'study_db_id' in params:
            query_params.append(('studyDbId', params['study_db_id']))  # noqa: E501
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/brapi/v1/studies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StudyDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_studies_search(self, **kwargs):  # noqa: E501
        """Retrieve studies information  # noqa: E501

        Retrieve studies information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_studies_search(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str study_db_id: Search by studyDbId
        :param str active: Filter active status true/false
        :param str sort_by: Name of the field to sort by: studyDbId or seasonDbId
        :param str sort_order: Sort order direction - ASC or DESC
        :param int page_size: pageSize
        :param int page: page
        :param str accept_language: Request accepted language
        :return: list[StudyDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_studies_search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_studies_search_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_studies_search_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve studies information  # noqa: E501

        Retrieve studies information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_studies_search_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str study_db_id: Search by studyDbId
        :param str active: Filter active status true/false
        :param str sort_by: Name of the field to sort by: studyDbId or seasonDbId
        :param str sort_order: Sort order direction - ASC or DESC
        :param int page_size: pageSize
        :param int page: page
        :param str accept_language: Request accepted language
        :return: list[StudyDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_db_id', 'active', 'sort_by', 'sort_order', 'page_size', 'page', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_studies_search" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_studies_search`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_studies_search`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'study_db_id' in params:
            query_params.append(('studyDbId', params['study_db_id']))  # noqa: E501
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/brapi/v1/studies-search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StudyDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_study_details(self, study_db_id, **kwargs):  # noqa: E501
        """Retrieve study details  # noqa: E501

        Retrieve study details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_study_details(study_db_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_db_id: Search by studyDbId (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[StudyDetailsDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_study_details_with_http_info(study_db_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_study_details_with_http_info(study_db_id, **kwargs)  # noqa: E501
            return data

    def get_study_details_with_http_info(self, study_db_id, **kwargs):  # noqa: E501
        """Retrieve study details  # noqa: E501

        Retrieve study details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_study_details_with_http_info(study_db_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str study_db_id: Search by studyDbId (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[StudyDetailsDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_db_id', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_study_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'study_db_id' is set
        if ('study_db_id' not in params or
                params['study_db_id'] is None):
            raise ValueError("Missing the required parameter `study_db_id` when calling `get_study_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'study_db_id' in params:
            path_params['studyDbId'] = params['study_db_id']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/brapi/v1/studies/{studyDbId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StudyDetailsDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_variable_details(self, observation_variable_db_id, **kwargs):  # noqa: E501
        """Retrieve variable details by id  # noqa: E501

        Retrieve variable details by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variable_details(observation_variable_db_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str observation_variable_db_id: A variable URI (Unique Resource Identifier) (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ObservationVariableDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_variable_details_with_http_info(observation_variable_db_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_variable_details_with_http_info(observation_variable_db_id, **kwargs)  # noqa: E501
            return data

    def get_variable_details_with_http_info(self, observation_variable_db_id, **kwargs):  # noqa: E501
        """Retrieve variable details by id  # noqa: E501

        Retrieve variable details by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variable_details_with_http_info(observation_variable_db_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str observation_variable_db_id: A variable URI (Unique Resource Identifier) (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ObservationVariableDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['observation_variable_db_id', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_variable_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'observation_variable_db_id' is set
        if ('observation_variable_db_id' not in params or
                params['observation_variable_db_id'] is None):
            raise ValueError("Missing the required parameter `observation_variable_db_id` when calling `get_variable_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'observation_variable_db_id' in params:
            path_params['observationVariableDbId'] = params['observation_variable_db_id']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/brapi/v1/variables/{observationVariableDbId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ObservationVariableDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_variables_list(self, **kwargs):  # noqa: E501
        """Call to retrieve a list of observationVariables available in the system  # noqa: E501

        retrieve variables information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variables_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str observation_variable_db_id: observationVariableDbId
        :param int page_size: pageSize
        :param int page: page
        :param str accept_language: Request accepted language
        :return: list[ObservationVariableDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_variables_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_variables_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_variables_list_with_http_info(self, **kwargs):  # noqa: E501
        """Call to retrieve a list of observationVariables available in the system  # noqa: E501

        retrieve variables information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_variables_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str observation_variable_db_id: observationVariableDbId
        :param int page_size: pageSize
        :param int page: page
        :param str accept_language: Request accepted language
        :return: list[ObservationVariableDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['observation_variable_db_id', 'page_size', 'page', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_variables_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_variables_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_variables_list`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'observation_variable_db_id' in params:
            query_params.append(('observationVariableDbId', params['observation_variable_db_id']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/brapi/v1/variables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ObservationVariableDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
