# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: INSTANCE-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataFileGetDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'rdf_type': 'str',
        '_date': 'str',
        'timezone': 'str',
        'scientific_objects': 'list[str]',
        'provenance': 'DataProvenanceModel',
        'metadata': 'dict(str, object)'
    }

    attribute_map = {
        'uri': 'uri',
        'rdf_type': 'rdf_type',
        '_date': 'date',
        'timezone': 'timezone',
        'scientific_objects': 'scientific_objects',
        'provenance': 'provenance',
        'metadata': 'metadata'
    }

    def __init__(self, uri=None, rdf_type=None, _date=None, timezone=None, scientific_objects=None, provenance=None, metadata=None):  # noqa: E501
        """DataFileGetDTO - a model defined in Swagger"""  # noqa: E501

        self._uri = None
        self._rdf_type = None
        self.__date = None
        self._timezone = None
        self._scientific_objects = None
        self._provenance = None
        self._metadata = None
        self.discriminator = None

        self.uri = uri
        self.rdf_type = rdf_type
        if _date is not None:
            self._date = _date
        if timezone is not None:
            self.timezone = timezone
        if scientific_objects is not None:
            self.scientific_objects = scientific_objects
        self.provenance = provenance
        if metadata is not None:
            self.metadata = metadata

    @property
    def uri(self):
        """Gets the uri of this DataFileGetDTO.  # noqa: E501


        :return: The uri of this DataFileGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this DataFileGetDTO.


        :param uri: The uri of this DataFileGetDTO.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def rdf_type(self):
        """Gets the rdf_type of this DataFileGetDTO.  # noqa: E501

        file type  # noqa: E501

        :return: The rdf_type of this DataFileGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._rdf_type

    @rdf_type.setter
    def rdf_type(self, rdf_type):
        """Sets the rdf_type of this DataFileGetDTO.

        file type  # noqa: E501

        :param rdf_type: The rdf_type of this DataFileGetDTO.  # noqa: E501
        :type: str
        """
        if rdf_type is None:
            raise ValueError("Invalid value for `rdf_type`, must not be `None`")  # noqa: E501

        self._rdf_type = rdf_type

    @property
    def _date(self):
        """Gets the _date of this DataFileGetDTO.  # noqa: E501

        date or datetime  # noqa: E501

        :return: The _date of this DataFileGetDTO.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DataFileGetDTO.

        date or datetime  # noqa: E501

        :param _date: The _date of this DataFileGetDTO.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def timezone(self):
        """Gets the timezone of this DataFileGetDTO.  # noqa: E501

        to specify if the offset is not in the date and if the timezone is different from the default one  # noqa: E501

        :return: The timezone of this DataFileGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this DataFileGetDTO.

        to specify if the offset is not in the date and if the timezone is different from the default one  # noqa: E501

        :param timezone: The timezone of this DataFileGetDTO.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def scientific_objects(self):
        """Gets the scientific_objects of this DataFileGetDTO.  # noqa: E501

        scientific objects URIs on which the data have been collected  # noqa: E501

        :return: The scientific_objects of this DataFileGetDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._scientific_objects

    @scientific_objects.setter
    def scientific_objects(self, scientific_objects):
        """Sets the scientific_objects of this DataFileGetDTO.

        scientific objects URIs on which the data have been collected  # noqa: E501

        :param scientific_objects: The scientific_objects of this DataFileGetDTO.  # noqa: E501
        :type: list[str]
        """

        self._scientific_objects = scientific_objects

    @property
    def provenance(self):
        """Gets the provenance of this DataFileGetDTO.  # noqa: E501


        :return: The provenance of this DataFileGetDTO.  # noqa: E501
        :rtype: DataProvenanceModel
        """
        return self._provenance

    @provenance.setter
    def provenance(self, provenance):
        """Sets the provenance of this DataFileGetDTO.


        :param provenance: The provenance of this DataFileGetDTO.  # noqa: E501
        :type: DataProvenanceModel
        """
        if provenance is None:
            raise ValueError("Invalid value for `provenance`, must not be `None`")  # noqa: E501

        self._provenance = provenance

    @property
    def metadata(self):
        """Gets the metadata of this DataFileGetDTO.  # noqa: E501

        key-value system to store additional information that can be used to query data  # noqa: E501

        :return: The metadata of this DataFileGetDTO.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DataFileGetDTO.

        key-value system to store additional information that can be used to query data  # noqa: E501

        :param metadata: The metadata of this DataFileGetDTO.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataFileGetDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataFileGetDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
