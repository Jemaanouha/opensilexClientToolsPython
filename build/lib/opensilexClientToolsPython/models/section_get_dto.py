# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: INSTANCE-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SectionGetDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timezone': 'str',
        'uri': 'str',
        'created_date': 'str',
        'section_data': 'list[dict(str, object)]',
        'commit_address': 'str',
        'name': 'str',
        'updated_date': 'str'
    }

    attribute_map = {
        'timezone': 'timezone',
        'uri': 'uri',
        'created_date': 'created_date',
        'section_data': 'section_data',
        'commit_address': 'commit_address',
        'name': 'name',
        'updated_date': 'updated_date'
    }

    def __init__(self, timezone=None, uri=None, created_date=None, section_data=None, commit_address=None, name=None, updated_date=None):  # noqa: E501
        """SectionGetDTO - a model defined in Swagger"""  # noqa: E501

        self._timezone = None
        self._uri = None
        self._created_date = None
        self._section_data = None
        self._commit_address = None
        self._name = None
        self._updated_date = None
        self.discriminator = None

        if timezone is not None:
            self.timezone = timezone
        self.uri = uri
        self.created_date = created_date
        if section_data is not None:
            self.section_data = section_data
        self.commit_address = commit_address
        self.name = name
        self.updated_date = updated_date

    @property
    def timezone(self):
        """Gets the timezone of this SectionGetDTO.  # noqa: E501

        to specify if the offset is not in the date and if the timezone is different from the default one  # noqa: E501

        :return: The timezone of this SectionGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this SectionGetDTO.

        to specify if the offset is not in the date and if the timezone is different from the default one  # noqa: E501

        :param timezone: The timezone of this SectionGetDTO.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def uri(self):
        """Gets the uri of this SectionGetDTO.  # noqa: E501

        URI of the form being updated  # noqa: E501

        :return: The uri of this SectionGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this SectionGetDTO.

        URI of the form being updated  # noqa: E501

        :param uri: The uri of this SectionGetDTO.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def created_date(self):
        """Gets the created_date of this SectionGetDTO.  # noqa: E501

        timestamp  # noqa: E501

        :return: The created_date of this SectionGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this SectionGetDTO.

        timestamp  # noqa: E501

        :param created_date: The created_date of this SectionGetDTO.  # noqa: E501
        :type: str
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def section_data(self):
        """Gets the section_data of this SectionGetDTO.  # noqa: E501


        :return: The section_data of this SectionGetDTO.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._section_data

    @section_data.setter
    def section_data(self, section_data):
        """Sets the section_data of this SectionGetDTO.


        :param section_data: The section_data of this SectionGetDTO.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._section_data = section_data

    @property
    def commit_address(self):
        """Gets the commit_address of this SectionGetDTO.  # noqa: E501

        address of the commit  # noqa: E501

        :return: The commit_address of this SectionGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._commit_address

    @commit_address.setter
    def commit_address(self, commit_address):
        """Sets the commit_address of this SectionGetDTO.

        address of the commit  # noqa: E501

        :param commit_address: The commit_address of this SectionGetDTO.  # noqa: E501
        :type: str
        """
        if commit_address is None:
            raise ValueError("Invalid value for `commit_address`, must not be `None`")  # noqa: E501

        self._commit_address = commit_address

    @property
    def name(self):
        """Gets the name of this SectionGetDTO.  # noqa: E501

        name of the section  # noqa: E501

        :return: The name of this SectionGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SectionGetDTO.

        name of the section  # noqa: E501

        :param name: The name of this SectionGetDTO.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def updated_date(self):
        """Gets the updated_date of this SectionGetDTO.  # noqa: E501

        timestamp  # noqa: E501

        :return: The updated_date of this SectionGetDTO.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this SectionGetDTO.

        timestamp  # noqa: E501

        :param updated_date: The updated_date of this SectionGetDTO.  # noqa: E501
        :type: str
        """
        if updated_date is None:
            raise ValueError("Invalid value for `updated_date`, must not be `None`")  # noqa: E501

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SectionGetDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SectionGetDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
