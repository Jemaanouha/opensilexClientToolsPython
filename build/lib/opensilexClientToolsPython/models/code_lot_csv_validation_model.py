# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: INSTANCE-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CodeLotCSVValidationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'missing_headers': 'list[str]',
        'empty_headers': 'list[int]',
        'invalid_header_ur_is': 'dict(str, str)',
        'datatype_errors': 'dict(str, list[CSVDatatypeError])',
        'uri_not_found_errors': 'dict(str, list[CSVURINotFoundError])',
        'invalid_uri_errors': 'dict(str, list[CSVCell])',
        'missing_required_value_errors': 'dict(str, list[CSVCell])',
        'invalid_value_errors': 'dict(str, list[CSVCell])',
        'already_existing_uri_errors': 'dict(str, CSVCell)',
        'duplicate_uri_errors': 'dict(str, CSVDuplicateURIError)',
        'no_parent_errors': 'dict(str, list[CSVCell])',
        'boucle_errors': 'dict(str, list[CSVCell])',
        'linked_sibbling_errors': 'dict(str, list[CSVCell])',
        'short_circuit_errors': 'dict(str, list[CSVCell])',
        'duplicated_data_errors': 'dict(str, list[CSVCell])',
        'headers': 'list[str]',
        'headers_labels': 'list[str]',
        'nb_lines_imported': 'int',
        'nb_lines_to_import': 'int',
        'validation_step': 'bool',
        'too_large_dataset': 'bool',
        'insertion_step': 'bool',
        'valid_csv': 'bool',
        'error_message': 'str',
        'type_errors': 'dict(str, list[CSVCell])'
    }

    attribute_map = {
        'missing_headers': 'missingHeaders',
        'empty_headers': 'emptyHeaders',
        'invalid_header_ur_is': 'invalidHeaderURIs',
        'datatype_errors': 'datatypeErrors',
        'uri_not_found_errors': 'uriNotFoundErrors',
        'invalid_uri_errors': 'invalidURIErrors',
        'missing_required_value_errors': 'missingRequiredValueErrors',
        'invalid_value_errors': 'invalidValueErrors',
        'already_existing_uri_errors': 'alreadyExistingURIErrors',
        'duplicate_uri_errors': 'duplicateURIErrors',
        'no_parent_errors': 'noParentErrors',
        'boucle_errors': 'boucleErrors',
        'linked_sibbling_errors': 'linkedSibblingErrors',
        'short_circuit_errors': 'shortCircuitErrors',
        'duplicated_data_errors': 'duplicatedDataErrors',
        'headers': 'headers',
        'headers_labels': 'headersLabels',
        'nb_lines_imported': 'nbLinesImported',
        'nb_lines_to_import': 'nbLinesToImport',
        'validation_step': 'validationStep',
        'too_large_dataset': 'tooLargeDataset',
        'insertion_step': 'insertionStep',
        'valid_csv': 'validCSV',
        'error_message': 'errorMessage',
        'type_errors': 'typeErrors'
    }

    def __init__(self, missing_headers=None, empty_headers=None, invalid_header_ur_is=None, datatype_errors=None, uri_not_found_errors=None, invalid_uri_errors=None, missing_required_value_errors=None, invalid_value_errors=None, already_existing_uri_errors=None, duplicate_uri_errors=None, no_parent_errors=None, boucle_errors=None, linked_sibbling_errors=None, short_circuit_errors=None, duplicated_data_errors=None, headers=None, headers_labels=None, nb_lines_imported=None, nb_lines_to_import=None, validation_step=None, too_large_dataset=None, insertion_step=None, valid_csv=None, error_message=None, type_errors=None):  # noqa: E501
        """CodeLotCSVValidationModel - a model defined in Swagger"""  # noqa: E501

        self._missing_headers = None
        self._empty_headers = None
        self._invalid_header_ur_is = None
        self._datatype_errors = None
        self._uri_not_found_errors = None
        self._invalid_uri_errors = None
        self._missing_required_value_errors = None
        self._invalid_value_errors = None
        self._already_existing_uri_errors = None
        self._duplicate_uri_errors = None
        self._no_parent_errors = None
        self._boucle_errors = None
        self._linked_sibbling_errors = None
        self._short_circuit_errors = None
        self._duplicated_data_errors = None
        self._headers = None
        self._headers_labels = None
        self._nb_lines_imported = None
        self._nb_lines_to_import = None
        self._validation_step = None
        self._too_large_dataset = None
        self._insertion_step = None
        self._valid_csv = None
        self._error_message = None
        self._type_errors = None
        self.discriminator = None

        if missing_headers is not None:
            self.missing_headers = missing_headers
        if empty_headers is not None:
            self.empty_headers = empty_headers
        if invalid_header_ur_is is not None:
            self.invalid_header_ur_is = invalid_header_ur_is
        if datatype_errors is not None:
            self.datatype_errors = datatype_errors
        if uri_not_found_errors is not None:
            self.uri_not_found_errors = uri_not_found_errors
        if invalid_uri_errors is not None:
            self.invalid_uri_errors = invalid_uri_errors
        if missing_required_value_errors is not None:
            self.missing_required_value_errors = missing_required_value_errors
        if invalid_value_errors is not None:
            self.invalid_value_errors = invalid_value_errors
        if already_existing_uri_errors is not None:
            self.already_existing_uri_errors = already_existing_uri_errors
        if duplicate_uri_errors is not None:
            self.duplicate_uri_errors = duplicate_uri_errors
        if no_parent_errors is not None:
            self.no_parent_errors = no_parent_errors
        if boucle_errors is not None:
            self.boucle_errors = boucle_errors
        if linked_sibbling_errors is not None:
            self.linked_sibbling_errors = linked_sibbling_errors
        if short_circuit_errors is not None:
            self.short_circuit_errors = short_circuit_errors
        if duplicated_data_errors is not None:
            self.duplicated_data_errors = duplicated_data_errors
        if headers is not None:
            self.headers = headers
        if headers_labels is not None:
            self.headers_labels = headers_labels
        if nb_lines_imported is not None:
            self.nb_lines_imported = nb_lines_imported
        if nb_lines_to_import is not None:
            self.nb_lines_to_import = nb_lines_to_import
        if validation_step is not None:
            self.validation_step = validation_step
        if too_large_dataset is not None:
            self.too_large_dataset = too_large_dataset
        if insertion_step is not None:
            self.insertion_step = insertion_step
        if valid_csv is not None:
            self.valid_csv = valid_csv
        if error_message is not None:
            self.error_message = error_message
        if type_errors is not None:
            self.type_errors = type_errors

    @property
    def missing_headers(self):
        """Gets the missing_headers of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The missing_headers of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._missing_headers

    @missing_headers.setter
    def missing_headers(self, missing_headers):
        """Sets the missing_headers of this CodeLotCSVValidationModel.


        :param missing_headers: The missing_headers of this CodeLotCSVValidationModel.  # noqa: E501
        :type: list[str]
        """

        self._missing_headers = missing_headers

    @property
    def empty_headers(self):
        """Gets the empty_headers of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The empty_headers of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._empty_headers

    @empty_headers.setter
    def empty_headers(self, empty_headers):
        """Sets the empty_headers of this CodeLotCSVValidationModel.


        :param empty_headers: The empty_headers of this CodeLotCSVValidationModel.  # noqa: E501
        :type: list[int]
        """

        self._empty_headers = empty_headers

    @property
    def invalid_header_ur_is(self):
        """Gets the invalid_header_ur_is of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The invalid_header_ur_is of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._invalid_header_ur_is

    @invalid_header_ur_is.setter
    def invalid_header_ur_is(self, invalid_header_ur_is):
        """Sets the invalid_header_ur_is of this CodeLotCSVValidationModel.


        :param invalid_header_ur_is: The invalid_header_ur_is of this CodeLotCSVValidationModel.  # noqa: E501
        :type: dict(str, str)
        """

        self._invalid_header_ur_is = invalid_header_ur_is

    @property
    def datatype_errors(self):
        """Gets the datatype_errors of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The datatype_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: dict(str, list[CSVDatatypeError])
        """
        return self._datatype_errors

    @datatype_errors.setter
    def datatype_errors(self, datatype_errors):
        """Sets the datatype_errors of this CodeLotCSVValidationModel.


        :param datatype_errors: The datatype_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :type: dict(str, list[CSVDatatypeError])
        """

        self._datatype_errors = datatype_errors

    @property
    def uri_not_found_errors(self):
        """Gets the uri_not_found_errors of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The uri_not_found_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: dict(str, list[CSVURINotFoundError])
        """
        return self._uri_not_found_errors

    @uri_not_found_errors.setter
    def uri_not_found_errors(self, uri_not_found_errors):
        """Sets the uri_not_found_errors of this CodeLotCSVValidationModel.


        :param uri_not_found_errors: The uri_not_found_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :type: dict(str, list[CSVURINotFoundError])
        """

        self._uri_not_found_errors = uri_not_found_errors

    @property
    def invalid_uri_errors(self):
        """Gets the invalid_uri_errors of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The invalid_uri_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: dict(str, list[CSVCell])
        """
        return self._invalid_uri_errors

    @invalid_uri_errors.setter
    def invalid_uri_errors(self, invalid_uri_errors):
        """Sets the invalid_uri_errors of this CodeLotCSVValidationModel.


        :param invalid_uri_errors: The invalid_uri_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :type: dict(str, list[CSVCell])
        """

        self._invalid_uri_errors = invalid_uri_errors

    @property
    def missing_required_value_errors(self):
        """Gets the missing_required_value_errors of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The missing_required_value_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: dict(str, list[CSVCell])
        """
        return self._missing_required_value_errors

    @missing_required_value_errors.setter
    def missing_required_value_errors(self, missing_required_value_errors):
        """Sets the missing_required_value_errors of this CodeLotCSVValidationModel.


        :param missing_required_value_errors: The missing_required_value_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :type: dict(str, list[CSVCell])
        """

        self._missing_required_value_errors = missing_required_value_errors

    @property
    def invalid_value_errors(self):
        """Gets the invalid_value_errors of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The invalid_value_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: dict(str, list[CSVCell])
        """
        return self._invalid_value_errors

    @invalid_value_errors.setter
    def invalid_value_errors(self, invalid_value_errors):
        """Sets the invalid_value_errors of this CodeLotCSVValidationModel.


        :param invalid_value_errors: The invalid_value_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :type: dict(str, list[CSVCell])
        """

        self._invalid_value_errors = invalid_value_errors

    @property
    def already_existing_uri_errors(self):
        """Gets the already_existing_uri_errors of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The already_existing_uri_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: dict(str, CSVCell)
        """
        return self._already_existing_uri_errors

    @already_existing_uri_errors.setter
    def already_existing_uri_errors(self, already_existing_uri_errors):
        """Sets the already_existing_uri_errors of this CodeLotCSVValidationModel.


        :param already_existing_uri_errors: The already_existing_uri_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :type: dict(str, CSVCell)
        """

        self._already_existing_uri_errors = already_existing_uri_errors

    @property
    def duplicate_uri_errors(self):
        """Gets the duplicate_uri_errors of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The duplicate_uri_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: dict(str, CSVDuplicateURIError)
        """
        return self._duplicate_uri_errors

    @duplicate_uri_errors.setter
    def duplicate_uri_errors(self, duplicate_uri_errors):
        """Sets the duplicate_uri_errors of this CodeLotCSVValidationModel.


        :param duplicate_uri_errors: The duplicate_uri_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :type: dict(str, CSVDuplicateURIError)
        """

        self._duplicate_uri_errors = duplicate_uri_errors

    @property
    def no_parent_errors(self):
        """Gets the no_parent_errors of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The no_parent_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: dict(str, list[CSVCell])
        """
        return self._no_parent_errors

    @no_parent_errors.setter
    def no_parent_errors(self, no_parent_errors):
        """Sets the no_parent_errors of this CodeLotCSVValidationModel.


        :param no_parent_errors: The no_parent_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :type: dict(str, list[CSVCell])
        """

        self._no_parent_errors = no_parent_errors

    @property
    def boucle_errors(self):
        """Gets the boucle_errors of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The boucle_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: dict(str, list[CSVCell])
        """
        return self._boucle_errors

    @boucle_errors.setter
    def boucle_errors(self, boucle_errors):
        """Sets the boucle_errors of this CodeLotCSVValidationModel.


        :param boucle_errors: The boucle_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :type: dict(str, list[CSVCell])
        """

        self._boucle_errors = boucle_errors

    @property
    def linked_sibbling_errors(self):
        """Gets the linked_sibbling_errors of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The linked_sibbling_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: dict(str, list[CSVCell])
        """
        return self._linked_sibbling_errors

    @linked_sibbling_errors.setter
    def linked_sibbling_errors(self, linked_sibbling_errors):
        """Sets the linked_sibbling_errors of this CodeLotCSVValidationModel.


        :param linked_sibbling_errors: The linked_sibbling_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :type: dict(str, list[CSVCell])
        """

        self._linked_sibbling_errors = linked_sibbling_errors

    @property
    def short_circuit_errors(self):
        """Gets the short_circuit_errors of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The short_circuit_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: dict(str, list[CSVCell])
        """
        return self._short_circuit_errors

    @short_circuit_errors.setter
    def short_circuit_errors(self, short_circuit_errors):
        """Sets the short_circuit_errors of this CodeLotCSVValidationModel.


        :param short_circuit_errors: The short_circuit_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :type: dict(str, list[CSVCell])
        """

        self._short_circuit_errors = short_circuit_errors

    @property
    def duplicated_data_errors(self):
        """Gets the duplicated_data_errors of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The duplicated_data_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: dict(str, list[CSVCell])
        """
        return self._duplicated_data_errors

    @duplicated_data_errors.setter
    def duplicated_data_errors(self, duplicated_data_errors):
        """Sets the duplicated_data_errors of this CodeLotCSVValidationModel.


        :param duplicated_data_errors: The duplicated_data_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :type: dict(str, list[CSVCell])
        """

        self._duplicated_data_errors = duplicated_data_errors

    @property
    def headers(self):
        """Gets the headers of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The headers of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this CodeLotCSVValidationModel.


        :param headers: The headers of this CodeLotCSVValidationModel.  # noqa: E501
        :type: list[str]
        """

        self._headers = headers

    @property
    def headers_labels(self):
        """Gets the headers_labels of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The headers_labels of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._headers_labels

    @headers_labels.setter
    def headers_labels(self, headers_labels):
        """Sets the headers_labels of this CodeLotCSVValidationModel.


        :param headers_labels: The headers_labels of this CodeLotCSVValidationModel.  # noqa: E501
        :type: list[str]
        """

        self._headers_labels = headers_labels

    @property
    def nb_lines_imported(self):
        """Gets the nb_lines_imported of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The nb_lines_imported of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: int
        """
        return self._nb_lines_imported

    @nb_lines_imported.setter
    def nb_lines_imported(self, nb_lines_imported):
        """Sets the nb_lines_imported of this CodeLotCSVValidationModel.


        :param nb_lines_imported: The nb_lines_imported of this CodeLotCSVValidationModel.  # noqa: E501
        :type: int
        """

        self._nb_lines_imported = nb_lines_imported

    @property
    def nb_lines_to_import(self):
        """Gets the nb_lines_to_import of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The nb_lines_to_import of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: int
        """
        return self._nb_lines_to_import

    @nb_lines_to_import.setter
    def nb_lines_to_import(self, nb_lines_to_import):
        """Sets the nb_lines_to_import of this CodeLotCSVValidationModel.


        :param nb_lines_to_import: The nb_lines_to_import of this CodeLotCSVValidationModel.  # noqa: E501
        :type: int
        """

        self._nb_lines_to_import = nb_lines_to_import

    @property
    def validation_step(self):
        """Gets the validation_step of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The validation_step of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: bool
        """
        return self._validation_step

    @validation_step.setter
    def validation_step(self, validation_step):
        """Sets the validation_step of this CodeLotCSVValidationModel.


        :param validation_step: The validation_step of this CodeLotCSVValidationModel.  # noqa: E501
        :type: bool
        """

        self._validation_step = validation_step

    @property
    def too_large_dataset(self):
        """Gets the too_large_dataset of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The too_large_dataset of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: bool
        """
        return self._too_large_dataset

    @too_large_dataset.setter
    def too_large_dataset(self, too_large_dataset):
        """Sets the too_large_dataset of this CodeLotCSVValidationModel.


        :param too_large_dataset: The too_large_dataset of this CodeLotCSVValidationModel.  # noqa: E501
        :type: bool
        """

        self._too_large_dataset = too_large_dataset

    @property
    def insertion_step(self):
        """Gets the insertion_step of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The insertion_step of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: bool
        """
        return self._insertion_step

    @insertion_step.setter
    def insertion_step(self, insertion_step):
        """Sets the insertion_step of this CodeLotCSVValidationModel.


        :param insertion_step: The insertion_step of this CodeLotCSVValidationModel.  # noqa: E501
        :type: bool
        """

        self._insertion_step = insertion_step

    @property
    def valid_csv(self):
        """Gets the valid_csv of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The valid_csv of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: bool
        """
        return self._valid_csv

    @valid_csv.setter
    def valid_csv(self, valid_csv):
        """Sets the valid_csv of this CodeLotCSVValidationModel.


        :param valid_csv: The valid_csv of this CodeLotCSVValidationModel.  # noqa: E501
        :type: bool
        """

        self._valid_csv = valid_csv

    @property
    def error_message(self):
        """Gets the error_message of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The error_message of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this CodeLotCSVValidationModel.


        :param error_message: The error_message of this CodeLotCSVValidationModel.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def type_errors(self):
        """Gets the type_errors of this CodeLotCSVValidationModel.  # noqa: E501


        :return: The type_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :rtype: dict(str, list[CSVCell])
        """
        return self._type_errors

    @type_errors.setter
    def type_errors(self, type_errors):
        """Sets the type_errors of this CodeLotCSVValidationModel.


        :param type_errors: The type_errors of this CodeLotCSVValidationModel.  # noqa: E501
        :type: dict(str, list[CSVCell])
        """

        self._type_errors = type_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CodeLotCSVValidationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodeLotCSVValidationModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
