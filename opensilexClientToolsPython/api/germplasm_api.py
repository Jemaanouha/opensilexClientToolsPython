# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0-rc+7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from typing import List
from opensilexClientToolsPython.models import *
from datetime import date
import inspect
from opensilexClientToolsPython.api_client import ApiClient


class GermplasmApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        
    def create_germplasm(
        self,
        body : 'GermplasmCreationDTO' = None,
        check_only : 'bool' = None,
        **kwargs
    ):  # noqa: E501
        """Add a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_germplasm(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmCreationDTO body: Germplasm description
        :param bool check_only: Checking only
        :param str accept_language: Request accepted language
        :return: ObjectUriResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if body:
            try:
                try:
                    # standard type no list
                    body = GermplasmCreationDTO(body)
                except:
                    # standard type no list
                    body = GermplasmCreationDTO(**body.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `GermplasmCreationDTO` \n{0}".format(e))
                 
        if check_only:
            try:
                try:
                    # standard type no list
                    check_only = bool(check_only)
                except:
                    # standard type no list
                    check_only = bool(**check_only.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `check_only`. This parameter couldn't be cast to type `bool` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.create_germplasm_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.create_germplasm_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def create_germplasm_with_http_info(self, **kwargs):  # noqa: E501
        """Add a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_germplasm_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmCreationDTO body: Germplasm description
        :param bool check_only: Checking only
        :param str accept_language: Request accepted language
        :return: ObjectUriResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'check_only', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_germplasm" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'check_only' in params:
            query_params.append(('checkOnly', params['check_only']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ObjectUriResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def delete_germplasm(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Delete a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_germplasm(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Germplasm URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.delete_germplasm_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_germplasm_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def delete_germplasm_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Delete a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_germplasm_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Germplasm URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_germplasm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `delete_germplasm`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm/{uri}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def export_germplasm(
        self,
        body : 'GermplasmSearchFilter' = None,
        **kwargs
    ):  # noqa: E501
        """export germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_germplasm(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmSearchFilter body: CSV export configuration
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if body:
            try:
                try:
                    # standard type no list
                    body = GermplasmSearchFilter(body)
                except:
                    # standard type no list
                    body = GermplasmSearchFilter(**body.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `GermplasmSearchFilter` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.export_germplasm_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.export_germplasm_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def export_germplasm_with_http_info(self, **kwargs):  # noqa: E501
        """export germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_germplasm_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmSearchFilter body: CSV export configuration
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_germplasm" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_germplasm(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Get a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: germplasm URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: GermplasmGetSingleDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_germplasm_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_germplasm_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: germplasm URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: GermplasmGetSingleDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_germplasm`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm/{uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GermplasmGetSingleDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_germplasm_attribute_values(
        self,
        attribute : 'str',
        attribute_value : 'str' = None,
        page : 'int' = None,
        page_size : 'int' = None,
        **kwargs
    ):  # noqa: E501
        """Get attribute values of all germplasm for a given attribute  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_attribute_values(attribute, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute: (required)
        :param str authorization: Authentication token (required)
        :param str attribute_value: Regex pattern for filtering attribute value
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["attribute", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                attribute = str(attribute)
            except:
                attribute = str(**attribute.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `attribute`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             
        if attribute_value:
            try:
                try:
                    # standard type no list
                    attribute_value = str(attribute_value)
                except:
                    # standard type no list
                    attribute_value = str(**attribute_value.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `attribute_value`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if page:
            try:
                try:
                    # standard type no list
                    page = int(page)
                except:
                    # standard type no list
                    page = int(**page.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 
        if page_size:
            try:
                try:
                    # standard type no list
                    page_size = int(page_size)
                except:
                    # standard type no list
                    page_size = int(**page_size.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page_size`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.get_germplasm_attribute_values_with_http_info(attribute, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_attribute_values_with_http_info(attribute, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_germplasm_attribute_values_with_http_info(self, attribute, **kwargs):  # noqa: E501
        """Get attribute values of all germplasm for a given attribute  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_attribute_values_with_http_info(attribute, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute: (required)
        :param str authorization: Authentication token (required)
        :param str attribute_value: Regex pattern for filtering attribute value
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attribute', 'attribute_value', 'page', 'page_size', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm_attribute_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attribute' is set
        if ('attribute' not in params or
                params['attribute'] is None):
            raise ValueError("Missing the required parameter `attribute` when calling `get_germplasm_attribute_values`")  # noqa: E501

        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_germplasm_attribute_values`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_germplasm_attribute_values`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'attribute' in params:
            path_params['attribute'] = params['attribute']  # noqa: E501

        query_params = []
        if 'attribute_value' in params:
            query_params.append(('attribute_value', params['attribute_value']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm/attributes/{attribute}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_germplasm_attributes(
        self,
        **kwargs
    ):  # noqa: E501
        """Get attributes of all germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_attributes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        


        if kwargs.get('async_req'):
            return self.get_germplasm_attributes_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_attributes_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_germplasm_attributes_with_http_info(self, **kwargs):  # noqa: E501
        """Get attributes of all germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_attributes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm_attributes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm/attributes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_germplasm_experiments(
        self,
        uri : 'str',
        attribute_value : 'str' = None,
        order_by : 'List[str]' = None,
        page : 'int' = None,
        page_size : 'int' = None,
        **kwargs
    ):  # noqa: E501
        """Get experiments where a germplasm has been used  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_experiments(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: germplasm URI (required)
        :param str authorization: Authentication token (required)
        :param str attribute_value: Regex pattern for filtering experiments by name
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[ExperimentGetListDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             
        if attribute_value:
            try:
                try:
                    # standard type no list
                    attribute_value = str(attribute_value)
                except:
                    # standard type no list
                    attribute_value = str(**attribute_value.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `attribute_value`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if order_by:
            try:
                try:
                    # standard type list
                    order_by = [
                        str(x)
                        for x in order_by
                    ]
                except:
                    # standard type list
                    order_by = [
                        str(**x.to_dict())
                        for x in order_by
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `order_by`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if page:
            try:
                try:
                    # standard type no list
                    page = int(page)
                except:
                    # standard type no list
                    page = int(**page.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 
        if page_size:
            try:
                try:
                    # standard type no list
                    page_size = int(page_size)
                except:
                    # standard type no list
                    page_size = int(**page_size.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page_size`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.get_germplasm_experiments_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_experiments_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_germplasm_experiments_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get experiments where a germplasm has been used  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_experiments_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: germplasm URI (required)
        :param str authorization: Authentication token (required)
        :param str attribute_value: Regex pattern for filtering experiments by name
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[ExperimentGetListDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'attribute_value', 'order_by', 'page', 'page_size', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm_experiments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_germplasm_experiments`")  # noqa: E501

        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_germplasm_experiments`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_germplasm_experiments`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []
        if 'attribute_value' in params:
            query_params.append(('attribute_value', params['attribute_value']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm/{uri}/experiments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ExperimentGetListDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_germplasms_by_uri(
        self,
        uris : 'List[str]',
        **kwargs
    ):  # noqa: E501
        """Get a list of germplasms by their URIs  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasms_by_uri(uris, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] uris: Germplasms URIs (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[GermplasmGetAllDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uris", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uris = [
                    str(x)
                    for x in uris
                ]
            except:
                uris = [
                    str(**x.to_dict())
                    for x in uris
                ]
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uris`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_germplasms_by_uri_with_http_info(uris, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasms_by_uri_with_http_info(uris, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_germplasms_by_uri_with_http_info(self, uris, **kwargs):  # noqa: E501
        """Get a list of germplasms by their URIs  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasms_by_uri_with_http_info(uris, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] uris: Germplasms URIs (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[GermplasmGetAllDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uris', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasms_by_uri" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uris' is set
        if ('uris' not in params or
                params['uris'] is None):
            raise ValueError("Missing the required parameter `uris` when calling `get_germplasms_by_uri`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uris' in params:
            query_params.append(('uris', params['uris']))  # noqa: E501
            collection_formats['uris'] = 'multi'  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm/by_uris', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GermplasmGetAllDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def search_germplasm(
        self,
        uri : 'str' = None,
        rdf_type : 'str' = None,
        name : 'str' = None,
        code : 'str' = None,
        production_year : 'int' = None,
        species : 'str' = None,
        variety : 'str' = None,
        accession : 'str' = None,
        institute : 'str' = None,
        experiment : 'str' = None,
        metadata : 'str' = None,
        order_by : 'List[str]' = None,
        page : 'int' = None,
        page_size : 'int' = None,
        **kwargs
    ):  # noqa: E501
        """Search germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_germplasm(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str uri: Regex pattern for filtering list by uri
        :param str rdf_type: Search by type
        :param str name: Regex pattern for filtering list by name and synonyms
        :param str code: Regex pattern for filtering list by code
        :param int production_year: Search by production year
        :param str species: Search by species
        :param str variety: Search by variety
        :param str accession: Search by accession
        :param str institute: Search by institute
        :param str experiment: Search by experiment
        :param str metadata: Search by metadata
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[GermplasmGetAllDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if uri:
            try:
                try:
                    # standard type no list
                    uri = str(uri)
                except:
                    # standard type no list
                    uri = str(**uri.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if rdf_type:
            try:
                try:
                    # standard type no list
                    rdf_type = str(rdf_type)
                except:
                    # standard type no list
                    rdf_type = str(**rdf_type.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `rdf_type`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if name:
            try:
                try:
                    # standard type no list
                    name = str(name)
                except:
                    # standard type no list
                    name = str(**name.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `name`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if code:
            try:
                try:
                    # standard type no list
                    code = str(code)
                except:
                    # standard type no list
                    code = str(**code.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `code`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if production_year:
            try:
                try:
                    # standard type no list
                    production_year = int(production_year)
                except:
                    # standard type no list
                    production_year = int(**production_year.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `production_year`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 
        if species:
            try:
                try:
                    # standard type no list
                    species = str(species)
                except:
                    # standard type no list
                    species = str(**species.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `species`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if variety:
            try:
                try:
                    # standard type no list
                    variety = str(variety)
                except:
                    # standard type no list
                    variety = str(**variety.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `variety`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if accession:
            try:
                try:
                    # standard type no list
                    accession = str(accession)
                except:
                    # standard type no list
                    accession = str(**accession.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `accession`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if institute:
            try:
                try:
                    # standard type no list
                    institute = str(institute)
                except:
                    # standard type no list
                    institute = str(**institute.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `institute`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if experiment:
            try:
                try:
                    # standard type no list
                    experiment = str(experiment)
                except:
                    # standard type no list
                    experiment = str(**experiment.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `experiment`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if metadata:
            try:
                try:
                    # standard type no list
                    metadata = str(metadata)
                except:
                    # standard type no list
                    metadata = str(**metadata.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `metadata`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if order_by:
            try:
                try:
                    # standard type list
                    order_by = [
                        str(x)
                        for x in order_by
                    ]
                except:
                    # standard type list
                    order_by = [
                        str(**x.to_dict())
                        for x in order_by
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `order_by`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if page:
            try:
                try:
                    # standard type no list
                    page = int(page)
                except:
                    # standard type no list
                    page = int(**page.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 
        if page_size:
            try:
                try:
                    # standard type no list
                    page_size = int(page_size)
                except:
                    # standard type no list
                    page_size = int(**page_size.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page_size`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.search_germplasm_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.search_germplasm_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def search_germplasm_with_http_info(self, **kwargs):  # noqa: E501
        """Search germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_germplasm_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str uri: Regex pattern for filtering list by uri
        :param str rdf_type: Search by type
        :param str name: Regex pattern for filtering list by name and synonyms
        :param str code: Regex pattern for filtering list by code
        :param int production_year: Search by production year
        :param str species: Search by species
        :param str variety: Search by variety
        :param str accession: Search by accession
        :param str institute: Search by institute
        :param str experiment: Search by experiment
        :param str metadata: Search by metadata
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[GermplasmGetAllDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'rdf_type', 'name', 'code', 'production_year', 'species', 'variety', 'accession', 'institute', 'experiment', 'metadata', 'order_by', 'page', 'page_size', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_germplasm" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `search_germplasm`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `search_germplasm`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'rdf_type' in params:
            query_params.append(('rdf_type', params['rdf_type']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501
        if 'production_year' in params:
            query_params.append(('production_year', params['production_year']))  # noqa: E501
        if 'species' in params:
            query_params.append(('species', params['species']))  # noqa: E501
        if 'variety' in params:
            query_params.append(('variety', params['variety']))  # noqa: E501
        if 'accession' in params:
            query_params.append(('accession', params['accession']))  # noqa: E501
        if 'institute' in params:
            query_params.append(('institute', params['institute']))  # noqa: E501
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GermplasmGetAllDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def update_germplasm(
        self,
        body : 'GermplasmUpdateDTO' = None,
        **kwargs
    ):  # noqa: E501
        """Update a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_germplasm(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmUpdateDTO body: Germplasm description
        :param str accept_language: Request accepted language
        :return: ObjectUriResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if body:
            try:
                try:
                    # standard type no list
                    body = GermplasmUpdateDTO(body)
                except:
                    # standard type no list
                    body = GermplasmUpdateDTO(**body.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `GermplasmUpdateDTO` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.update_germplasm_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.update_germplasm_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def update_germplasm_with_http_info(self, **kwargs):  # noqa: E501
        """Update a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_germplasm_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmUpdateDTO body: Germplasm description
        :param str accept_language: Request accepted language
        :return: ObjectUriResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_germplasm" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ObjectUriResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
