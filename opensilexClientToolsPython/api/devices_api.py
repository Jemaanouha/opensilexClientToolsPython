# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0-rc+7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from typing import List
from opensilexClientToolsPython.models import *
from datetime import date
import inspect
from opensilexClientToolsPython.api_client import ApiClient


class DevicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        
    def count_device_data(
        self,
        uri : 'str',
        start_date : 'str' = None,
        end_date : 'str' = None,
        timezone : 'str' = None,
        experiment : 'List[str]' = None,
        variable : 'List[str]' = None,
        min_confidence : 'float' = None,
        max_confidence : 'float' = None,
        provenance : 'List[str]' = None,
        metadata : 'str' = None,
        **kwargs
    ):  # noqa: E501
        """Count device data  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_device_data(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str start_date: Search by minimal date
        :param str end_date: Search by maximal date
        :param str timezone: Precise the timezone corresponding to the given dates
        :param list[str] experiment: Search by experiment uris
        :param list[str] variable: Search by variables
        :param float min_confidence: Search by minimal confidence index
        :param float max_confidence: Search by maximal confidence index
        :param list[str] provenance: Search by provenance uri
        :param str metadata: Search by metadata
        :param str accept_language: Request accepted language
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             
        if start_date:
            try:
                try:
                    # standard type no list
                    start_date = str(start_date)
                except:
                    # standard type no list
                    start_date = str(**start_date.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `start_date`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if end_date:
            try:
                try:
                    # standard type no list
                    end_date = str(end_date)
                except:
                    # standard type no list
                    end_date = str(**end_date.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `end_date`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if timezone:
            try:
                try:
                    # standard type no list
                    timezone = str(timezone)
                except:
                    # standard type no list
                    timezone = str(**timezone.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `timezone`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if experiment:
            try:
                try:
                    # standard type list
                    experiment = [
                        str(x)
                        for x in experiment
                    ]
                except:
                    # standard type list
                    experiment = [
                        str(**x.to_dict())
                        for x in experiment
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `experiment`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if variable:
            try:
                try:
                    # standard type list
                    variable = [
                        str(x)
                        for x in variable
                    ]
                except:
                    # standard type list
                    variable = [
                        str(**x.to_dict())
                        for x in variable
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `variable`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if min_confidence:
            try:
                try:
                    # standard type no list
                    min_confidence = float(min_confidence)
                except:
                    # standard type no list
                    min_confidence = float(**min_confidence.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `min_confidence`. This parameter couldn't be cast to type `float` \n{0}".format(e))
                 
        if max_confidence:
            try:
                try:
                    # standard type no list
                    max_confidence = float(max_confidence)
                except:
                    # standard type no list
                    max_confidence = float(**max_confidence.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `max_confidence`. This parameter couldn't be cast to type `float` \n{0}".format(e))
                 
        if provenance:
            try:
                try:
                    # standard type list
                    provenance = [
                        str(x)
                        for x in provenance
                    ]
                except:
                    # standard type list
                    provenance = [
                        str(**x.to_dict())
                        for x in provenance
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `provenance`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if metadata:
            try:
                try:
                    # standard type no list
                    metadata = str(metadata)
                except:
                    # standard type no list
                    metadata = str(**metadata.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `metadata`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.count_device_data_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.count_device_data_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def count_device_data_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Count device data  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_device_data_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str start_date: Search by minimal date
        :param str end_date: Search by maximal date
        :param str timezone: Precise the timezone corresponding to the given dates
        :param list[str] experiment: Search by experiment uris
        :param list[str] variable: Search by variables
        :param float min_confidence: Search by minimal confidence index
        :param float max_confidence: Search by maximal confidence index
        :param list[str] provenance: Search by provenance uri
        :param str metadata: Search by metadata
        :param str accept_language: Request accepted language
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'start_date', 'end_date', 'timezone', 'experiment', 'variable', 'min_confidence', 'max_confidence', 'provenance', 'metadata', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method count_device_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `count_device_data`")  # noqa: E501

        if 'min_confidence' in params and params['min_confidence'] > 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `min_confidence` when calling `count_device_data`, must be a value less than or equal to `1`")  # noqa: E501
        if 'min_confidence' in params and params['min_confidence'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `min_confidence` when calling `count_device_data`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'max_confidence' in params and params['max_confidence'] > 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_confidence` when calling `count_device_data`, must be a value less than or equal to `1`")  # noqa: E501
        if 'max_confidence' in params and params['max_confidence'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_confidence` when calling `count_device_data`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501
            collection_formats['experiment'] = 'multi'  # noqa: E501
        if 'variable' in params:
            query_params.append(('variable', params['variable']))  # noqa: E501
            collection_formats['variable'] = 'multi'  # noqa: E501
        if 'min_confidence' in params:
            query_params.append(('min_confidence', params['min_confidence']))  # noqa: E501
        if 'max_confidence' in params:
            query_params.append(('max_confidence', params['max_confidence']))  # noqa: E501
        if 'provenance' in params:
            query_params.append(('provenance', params['provenance']))  # noqa: E501
            collection_formats['provenance'] = 'multi'  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}/data/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def create_device(
        self,
        body : 'DeviceCreationDTO' = None,
        check_only : 'bool' = None,
        **kwargs
    ):  # noqa: E501
        """Create a device  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_device(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param DeviceCreationDTO body: Device description
        :param bool check_only: Checking only
        :param str accept_language: Request accepted language
        :return: ObjectUriResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if body:
            try:
                try:
                    # standard type no list
                    body = DeviceCreationDTO(body)
                except:
                    # standard type no list
                    body = DeviceCreationDTO(**body.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `DeviceCreationDTO` \n{0}".format(e))
                 
        if check_only:
            try:
                try:
                    # standard type no list
                    check_only = bool(check_only)
                except:
                    # standard type no list
                    check_only = bool(**check_only.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `check_only`. This parameter couldn't be cast to type `bool` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.create_device_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.create_device_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def create_device_with_http_info(self, **kwargs):  # noqa: E501
        """Create a device  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_device_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param DeviceCreationDTO body: Device description
        :param bool check_only: Checking only
        :param str accept_language: Request accepted language
        :return: ObjectUriResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'check_only', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_device" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'check_only' in params:
            query_params.append(('checkOnly', params['check_only']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ObjectUriResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def delete_device(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Delete a device  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_device(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: ObjectUriResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.delete_device_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_device_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def delete_device_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Delete a device  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_device_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: ObjectUriResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `delete_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ObjectUriResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def export_devices(
        self,
        rdf_type : 'str' = None,
        include_subtypes : 'bool' = None,
        name : 'str' = None,
        year : 'int' = None,
        existence_date : 'str' = None,
        brand : 'str' = None,
        model : 'str' = None,
        serial_number : 'str' = None,
        metadata : 'str' = None,
        **kwargs
    ):  # noqa: E501
        """export devices  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_devices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str rdf_type: RDF type filter
        :param bool include_subtypes: Set this param to true when filtering on rdf_type to also retrieve sub-types
        :param str name: Regex pattern for filtering by name
        :param int year: Search by year
        :param str existence_date: Date to filter device existence
        :param str brand: Regex pattern for filtering by brand
        :param str model: Regex pattern for filtering by model
        :param str serial_number: Regex pattern for filtering by serial number
        :param str metadata: Search by metadata
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if rdf_type:
            try:
                try:
                    # standard type no list
                    rdf_type = str(rdf_type)
                except:
                    # standard type no list
                    rdf_type = str(**rdf_type.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `rdf_type`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if include_subtypes:
            try:
                try:
                    # standard type no list
                    include_subtypes = bool(include_subtypes)
                except:
                    # standard type no list
                    include_subtypes = bool(**include_subtypes.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `include_subtypes`. This parameter couldn't be cast to type `bool` \n{0}".format(e))
                 
        if name:
            try:
                try:
                    # standard type no list
                    name = str(name)
                except:
                    # standard type no list
                    name = str(**name.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `name`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if year:
            try:
                try:
                    # standard type no list
                    year = int(year)
                except:
                    # standard type no list
                    year = int(**year.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `year`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 
        if existence_date:
            try:
                # date type no list
                existence_date = date.fromisoformat(existence_date)
            except ValueError as e:
                raise ValueError("Invalid value for parameter `existence_date`. This parameter couldn't be cast to type `date` \n{0}".format(e))
                 
        if brand:
            try:
                try:
                    # standard type no list
                    brand = str(brand)
                except:
                    # standard type no list
                    brand = str(**brand.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `brand`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if model:
            try:
                try:
                    # standard type no list
                    model = str(model)
                except:
                    # standard type no list
                    model = str(**model.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `model`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if serial_number:
            try:
                try:
                    # standard type no list
                    serial_number = str(serial_number)
                except:
                    # standard type no list
                    serial_number = str(**serial_number.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `serial_number`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if metadata:
            try:
                try:
                    # standard type no list
                    metadata = str(metadata)
                except:
                    # standard type no list
                    metadata = str(**metadata.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `metadata`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.export_devices_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.export_devices_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def export_devices_with_http_info(self, **kwargs):  # noqa: E501
        """export devices  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_devices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str rdf_type: RDF type filter
        :param bool include_subtypes: Set this param to true when filtering on rdf_type to also retrieve sub-types
        :param str name: Regex pattern for filtering by name
        :param int year: Search by year
        :param str existence_date: Date to filter device existence
        :param str brand: Regex pattern for filtering by brand
        :param str model: Regex pattern for filtering by model
        :param str serial_number: Regex pattern for filtering by serial number
        :param str metadata: Search by metadata
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rdf_type', 'include_subtypes', 'name', 'year', 'existence_date', 'brand', 'model', 'serial_number', 'metadata', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_devices" % key
                )
            params[key] = val
        del params['kwargs']

        if 'year' in params and params['year'] > 10000:  # noqa: E501
            raise ValueError("Invalid value for parameter `year` when calling `export_devices`, must be a value less than or equal to `10000`")  # noqa: E501
        if 'year' in params and params['year'] < 999:  # noqa: E501
            raise ValueError("Invalid value for parameter `year` when calling `export_devices`, must be a value greater than or equal to `999`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rdf_type' in params:
            query_params.append(('rdf_type', params['rdf_type']))  # noqa: E501
        if 'include_subtypes' in params:
            query_params.append(('include_subtypes', params['include_subtypes']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if 'existence_date' in params:
            query_params.append(('existence_date', params['existence_date']))  # noqa: E501
        if 'brand' in params:
            query_params.append(('brand', params['brand']))  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serial_number', params['serial_number']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def export_list(
        self,
        body : 'URIsListPostDTO' = None,
        **kwargs
    ):  # noqa: E501
        """export devices  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param URIsListPostDTO body: List of device URI
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if body:
            try:
                try:
                    # standard type no list
                    body = URIsListPostDTO(body)
                except:
                    # standard type no list
                    body = URIsListPostDTO(**body.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `URIsListPostDTO` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.export_list_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.export_list_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def export_list_with_http_info(self, **kwargs):  # noqa: E501
        """export devices  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param URIsListPostDTO body: List of device URI
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/export_by_uris', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_device(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Get device detail  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: DeviceGetDetailsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_device_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_device_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get device detail  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: DeviceGetDetailsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceGetDetailsDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_device_by_uris(
        self,
        uris : 'List[str]',
        **kwargs
    ):  # noqa: E501
        """Get devices by uris  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_by_uris(uris, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] uris: Device URIs (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[DeviceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uris", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uris = [
                    str(x)
                    for x in uris
                ]
            except:
                uris = [
                    str(**x.to_dict())
                    for x in uris
                ]
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uris`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_device_by_uris_with_http_info(uris, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_by_uris_with_http_info(uris, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_device_by_uris_with_http_info(self, uris, **kwargs):  # noqa: E501
        """Get devices by uris  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_by_uris_with_http_info(uris, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] uris: Device URIs (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[DeviceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uris', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_by_uris" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uris' is set
        if ('uris' not in params or
                params['uris'] is None):
            raise ValueError("Missing the required parameter `uris` when calling `get_device_by_uris`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uris' in params:
            query_params.append(('uris', params['uris']))  # noqa: E501
            collection_formats['uris'] = 'multi'  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/by_uris', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_device_data_files_provenances(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Get provenances of datafiles linked to this device  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_data_files_provenances(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ProvenanceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_device_data_files_provenances_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_data_files_provenances_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_device_data_files_provenances_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get provenances of datafiles linked to this device  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_data_files_provenances_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ProvenanceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_data_files_provenances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_device_data_files_provenances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}/datafiles/provenances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProvenanceGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_device_data_provenances(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Get provenances of data that have been measured on this device  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_data_provenances(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ProvenanceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_device_data_provenances_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_data_provenances_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_device_data_provenances_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get provenances of data that have been measured on this device  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_data_provenances_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ProvenanceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_data_provenances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_device_data_provenances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}/data/provenances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProvenanceGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_device_facility(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Get device facility  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_facility(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: FacilityGetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_device_facility_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_facility_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_device_facility_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get device facility  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_facility_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: FacilityGetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_facility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_device_facility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}/facility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FacilityGetDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_device_variables(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Get variables linked to the device  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_variables(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[NamedResourceDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_device_variables_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_variables_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_device_variables_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get variables linked to the device  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_variables_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[NamedResourceDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_variables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_device_variables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}/variables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NamedResourceDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def import_csv(
        self,
        description : 'Object',
        file : 'str',
        **kwargs
    ):  # noqa: E501
        """Import a CSV file with one device per line  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_csv(description, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object description: CSV import settings (required)
        :param file file: Device file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["description", "file", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                description = Object(description)
            except:
                description = Object(**description.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `description`. This parameter couldn't be cast to type `Object` \n{0}".format(e))
             
        try:
            file = str(file)
        except ValueError as e:
            raise ValueError("Invalid value for parameter `file`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.import_csv_with_http_info(description, file, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.import_csv_with_http_info(description, file, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def import_csv_with_http_info(self, description, file, **kwargs):  # noqa: E501
        """Import a CSV file with one device per line  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_csv_with_http_info(description, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object description: CSV import settings (required)
        :param file file: Device file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['description', 'file', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `import_csv`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `import_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSVValidationDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def search_device_data(
        self,
        uri : 'str',
        start_date : 'str' = None,
        end_date : 'str' = None,
        timezone : 'str' = None,
        experiment : 'List[str]' = None,
        variable : 'List[str]' = None,
        min_confidence : 'float' = None,
        max_confidence : 'float' = None,
        provenance : 'List[str]' = None,
        metadata : 'str' = None,
        order_by : 'List[str]' = None,
        page : 'int' = None,
        page_size : 'int' = None,
        **kwargs
    ):  # noqa: E501
        """Search device data  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_device_data(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str start_date: Search by minimal date
        :param str end_date: Search by maximal date
        :param str timezone: Precise the timezone corresponding to the given dates
        :param list[str] experiment: Search by experiment uris
        :param list[str] variable: Search by variables
        :param float min_confidence: Search by minimal confidence index
        :param float max_confidence: Search by maximal confidence index
        :param list[str] provenance: Search by provenance uri
        :param str metadata: Search by metadata
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[DataGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             
        if start_date:
            try:
                try:
                    # standard type no list
                    start_date = str(start_date)
                except:
                    # standard type no list
                    start_date = str(**start_date.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `start_date`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if end_date:
            try:
                try:
                    # standard type no list
                    end_date = str(end_date)
                except:
                    # standard type no list
                    end_date = str(**end_date.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `end_date`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if timezone:
            try:
                try:
                    # standard type no list
                    timezone = str(timezone)
                except:
                    # standard type no list
                    timezone = str(**timezone.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `timezone`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if experiment:
            try:
                try:
                    # standard type list
                    experiment = [
                        str(x)
                        for x in experiment
                    ]
                except:
                    # standard type list
                    experiment = [
                        str(**x.to_dict())
                        for x in experiment
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `experiment`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if variable:
            try:
                try:
                    # standard type list
                    variable = [
                        str(x)
                        for x in variable
                    ]
                except:
                    # standard type list
                    variable = [
                        str(**x.to_dict())
                        for x in variable
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `variable`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if min_confidence:
            try:
                try:
                    # standard type no list
                    min_confidence = float(min_confidence)
                except:
                    # standard type no list
                    min_confidence = float(**min_confidence.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `min_confidence`. This parameter couldn't be cast to type `float` \n{0}".format(e))
                 
        if max_confidence:
            try:
                try:
                    # standard type no list
                    max_confidence = float(max_confidence)
                except:
                    # standard type no list
                    max_confidence = float(**max_confidence.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `max_confidence`. This parameter couldn't be cast to type `float` \n{0}".format(e))
                 
        if provenance:
            try:
                try:
                    # standard type list
                    provenance = [
                        str(x)
                        for x in provenance
                    ]
                except:
                    # standard type list
                    provenance = [
                        str(**x.to_dict())
                        for x in provenance
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `provenance`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if metadata:
            try:
                try:
                    # standard type no list
                    metadata = str(metadata)
                except:
                    # standard type no list
                    metadata = str(**metadata.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `metadata`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if order_by:
            try:
                try:
                    # standard type list
                    order_by = [
                        str(x)
                        for x in order_by
                    ]
                except:
                    # standard type list
                    order_by = [
                        str(**x.to_dict())
                        for x in order_by
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `order_by`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if page:
            try:
                try:
                    # standard type no list
                    page = int(page)
                except:
                    # standard type no list
                    page = int(**page.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 
        if page_size:
            try:
                try:
                    # standard type no list
                    page_size = int(page_size)
                except:
                    # standard type no list
                    page_size = int(**page_size.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page_size`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.search_device_data_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.search_device_data_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def search_device_data_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Search device data  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_device_data_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str start_date: Search by minimal date
        :param str end_date: Search by maximal date
        :param str timezone: Precise the timezone corresponding to the given dates
        :param list[str] experiment: Search by experiment uris
        :param list[str] variable: Search by variables
        :param float min_confidence: Search by minimal confidence index
        :param float max_confidence: Search by maximal confidence index
        :param list[str] provenance: Search by provenance uri
        :param str metadata: Search by metadata
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[DataGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'start_date', 'end_date', 'timezone', 'experiment', 'variable', 'min_confidence', 'max_confidence', 'provenance', 'metadata', 'order_by', 'page', 'page_size', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_device_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `search_device_data`")  # noqa: E501

        if 'min_confidence' in params and params['min_confidence'] > 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `min_confidence` when calling `search_device_data`, must be a value less than or equal to `1`")  # noqa: E501
        if 'min_confidence' in params and params['min_confidence'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `min_confidence` when calling `search_device_data`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'max_confidence' in params and params['max_confidence'] > 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_confidence` when calling `search_device_data`, must be a value less than or equal to `1`")  # noqa: E501
        if 'max_confidence' in params and params['max_confidence'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_confidence` when calling `search_device_data`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `search_device_data`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `search_device_data`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501
            collection_formats['experiment'] = 'multi'  # noqa: E501
        if 'variable' in params:
            query_params.append(('variable', params['variable']))  # noqa: E501
            collection_formats['variable'] = 'multi'  # noqa: E501
        if 'min_confidence' in params:
            query_params.append(('min_confidence', params['min_confidence']))  # noqa: E501
        if 'max_confidence' in params:
            query_params.append(('max_confidence', params['max_confidence']))  # noqa: E501
        if 'provenance' in params:
            query_params.append(('provenance', params['provenance']))  # noqa: E501
            collection_formats['provenance'] = 'multi'  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def search_device_datafiles(
        self,
        uri : 'str',
        rdf_type : 'str' = None,
        start_date : 'str' = None,
        end_date : 'str' = None,
        timezone : 'str' = None,
        experiment : 'List[str]' = None,
        scientific_objects : 'List[str]' = None,
        provenances : 'List[str]' = None,
        metadata : 'str' = None,
        order_by : 'List[str]' = None,
        page : 'int' = None,
        page_size : 'int' = None,
        **kwargs
    ):  # noqa: E501
        """Search device datafiles descriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_device_datafiles(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str rdf_type: Search by rdf type uri
        :param str start_date: Search by minimal date
        :param str end_date: Search by maximal date
        :param str timezone: Precise the timezone corresponding to the given dates
        :param list[str] experiment: Search by experiments
        :param list[str] scientific_objects: Search by object uris list
        :param list[str] provenances: Search by provenance uris list
        :param str metadata: Search by metadata
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[DataGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             
        if rdf_type:
            try:
                try:
                    # standard type no list
                    rdf_type = str(rdf_type)
                except:
                    # standard type no list
                    rdf_type = str(**rdf_type.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `rdf_type`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if start_date:
            try:
                try:
                    # standard type no list
                    start_date = str(start_date)
                except:
                    # standard type no list
                    start_date = str(**start_date.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `start_date`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if end_date:
            try:
                try:
                    # standard type no list
                    end_date = str(end_date)
                except:
                    # standard type no list
                    end_date = str(**end_date.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `end_date`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if timezone:
            try:
                try:
                    # standard type no list
                    timezone = str(timezone)
                except:
                    # standard type no list
                    timezone = str(**timezone.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `timezone`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if experiment:
            try:
                try:
                    # standard type list
                    experiment = [
                        str(x)
                        for x in experiment
                    ]
                except:
                    # standard type list
                    experiment = [
                        str(**x.to_dict())
                        for x in experiment
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `experiment`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if scientific_objects:
            try:
                try:
                    # standard type list
                    scientific_objects = [
                        str(x)
                        for x in scientific_objects
                    ]
                except:
                    # standard type list
                    scientific_objects = [
                        str(**x.to_dict())
                        for x in scientific_objects
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `scientific_objects`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if provenances:
            try:
                try:
                    # standard type list
                    provenances = [
                        str(x)
                        for x in provenances
                    ]
                except:
                    # standard type list
                    provenances = [
                        str(**x.to_dict())
                        for x in provenances
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `provenances`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if metadata:
            try:
                try:
                    # standard type no list
                    metadata = str(metadata)
                except:
                    # standard type no list
                    metadata = str(**metadata.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `metadata`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if order_by:
            try:
                try:
                    # standard type list
                    order_by = [
                        str(x)
                        for x in order_by
                    ]
                except:
                    # standard type list
                    order_by = [
                        str(**x.to_dict())
                        for x in order_by
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `order_by`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if page:
            try:
                try:
                    # standard type no list
                    page = int(page)
                except:
                    # standard type no list
                    page = int(**page.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 
        if page_size:
            try:
                try:
                    # standard type no list
                    page_size = int(page_size)
                except:
                    # standard type no list
                    page_size = int(**page_size.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page_size`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.search_device_datafiles_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.search_device_datafiles_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def search_device_datafiles_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Search device datafiles descriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_device_datafiles_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str rdf_type: Search by rdf type uri
        :param str start_date: Search by minimal date
        :param str end_date: Search by maximal date
        :param str timezone: Precise the timezone corresponding to the given dates
        :param list[str] experiment: Search by experiments
        :param list[str] scientific_objects: Search by object uris list
        :param list[str] provenances: Search by provenance uris list
        :param str metadata: Search by metadata
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[DataGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'rdf_type', 'start_date', 'end_date', 'timezone', 'experiment', 'scientific_objects', 'provenances', 'metadata', 'order_by', 'page', 'page_size', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_device_datafiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `search_device_datafiles`")  # noqa: E501

        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `search_device_datafiles`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `search_device_datafiles`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []
        if 'rdf_type' in params:
            query_params.append(('rdf_type', params['rdf_type']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501
            collection_formats['experiment'] = 'multi'  # noqa: E501
        if 'scientific_objects' in params:
            query_params.append(('scientific_objects', params['scientific_objects']))  # noqa: E501
            collection_formats['scientific_objects'] = 'multi'  # noqa: E501
        if 'provenances' in params:
            query_params.append(('provenances', params['provenances']))  # noqa: E501
            collection_formats['provenances'] = 'multi'  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}/datafiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def search_devices(
        self,
        rdf_type : 'str' = None,
        include_subtypes : 'bool' = None,
        name : 'str' = None,
        variable : 'str' = None,
        year : 'int' = None,
        existence_date : 'str' = None,
        facility : 'str' = None,
        brand : 'str' = None,
        model : 'str' = None,
        serial_number : 'str' = None,
        metadata : 'str' = None,
        order_by : 'List[str]' = None,
        page : 'int' = None,
        page_size : 'int' = None,
        **kwargs
    ):  # noqa: E501
        """Search devices  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_devices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str rdf_type: RDF type filter
        :param bool include_subtypes: Set this param to true when filtering on rdf_type to also retrieve sub-types
        :param str name: Regex pattern for filtering by name
        :param str variable: Variable
        :param int year: Search by year
        :param str existence_date: Date to filter device existence
        :param str facility: Search by facility
        :param str brand: Regex pattern for filtering by brand
        :param str model: Regex pattern for filtering by model
        :param str serial_number: Regex pattern for filtering by serial number
        :param str metadata: Search by metadata
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[DeviceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if rdf_type:
            try:
                try:
                    # standard type no list
                    rdf_type = str(rdf_type)
                except:
                    # standard type no list
                    rdf_type = str(**rdf_type.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `rdf_type`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if include_subtypes:
            try:
                try:
                    # standard type no list
                    include_subtypes = bool(include_subtypes)
                except:
                    # standard type no list
                    include_subtypes = bool(**include_subtypes.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `include_subtypes`. This parameter couldn't be cast to type `bool` \n{0}".format(e))
                 
        if name:
            try:
                try:
                    # standard type no list
                    name = str(name)
                except:
                    # standard type no list
                    name = str(**name.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `name`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if variable:
            try:
                try:
                    # standard type no list
                    variable = str(variable)
                except:
                    # standard type no list
                    variable = str(**variable.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `variable`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if year:
            try:
                try:
                    # standard type no list
                    year = int(year)
                except:
                    # standard type no list
                    year = int(**year.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `year`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 
        if existence_date:
            try:
                # date type no list
                existence_date = date.fromisoformat(existence_date)
            except ValueError as e:
                raise ValueError("Invalid value for parameter `existence_date`. This parameter couldn't be cast to type `date` \n{0}".format(e))
                 
        if facility:
            try:
                try:
                    # standard type no list
                    facility = str(facility)
                except:
                    # standard type no list
                    facility = str(**facility.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `facility`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if brand:
            try:
                try:
                    # standard type no list
                    brand = str(brand)
                except:
                    # standard type no list
                    brand = str(**brand.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `brand`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if model:
            try:
                try:
                    # standard type no list
                    model = str(model)
                except:
                    # standard type no list
                    model = str(**model.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `model`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if serial_number:
            try:
                try:
                    # standard type no list
                    serial_number = str(serial_number)
                except:
                    # standard type no list
                    serial_number = str(**serial_number.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `serial_number`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if metadata:
            try:
                try:
                    # standard type no list
                    metadata = str(metadata)
                except:
                    # standard type no list
                    metadata = str(**metadata.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `metadata`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if order_by:
            try:
                try:
                    # standard type list
                    order_by = [
                        str(x)
                        for x in order_by
                    ]
                except:
                    # standard type list
                    order_by = [
                        str(**x.to_dict())
                        for x in order_by
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `order_by`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if page:
            try:
                try:
                    # standard type no list
                    page = int(page)
                except:
                    # standard type no list
                    page = int(**page.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 
        if page_size:
            try:
                try:
                    # standard type no list
                    page_size = int(page_size)
                except:
                    # standard type no list
                    page_size = int(**page_size.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page_size`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.search_devices_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.search_devices_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def search_devices_with_http_info(self, **kwargs):  # noqa: E501
        """Search devices  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_devices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str rdf_type: RDF type filter
        :param bool include_subtypes: Set this param to true when filtering on rdf_type to also retrieve sub-types
        :param str name: Regex pattern for filtering by name
        :param str variable: Variable
        :param int year: Search by year
        :param str existence_date: Date to filter device existence
        :param str facility: Search by facility
        :param str brand: Regex pattern for filtering by brand
        :param str model: Regex pattern for filtering by model
        :param str serial_number: Regex pattern for filtering by serial number
        :param str metadata: Search by metadata
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[DeviceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rdf_type', 'include_subtypes', 'name', 'variable', 'year', 'existence_date', 'facility', 'brand', 'model', 'serial_number', 'metadata', 'order_by', 'page', 'page_size', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_devices" % key
                )
            params[key] = val
        del params['kwargs']

        if 'year' in params and params['year'] > 10000:  # noqa: E501
            raise ValueError("Invalid value for parameter `year` when calling `search_devices`, must be a value less than or equal to `10000`")  # noqa: E501
        if 'year' in params and params['year'] < 999:  # noqa: E501
            raise ValueError("Invalid value for parameter `year` when calling `search_devices`, must be a value greater than or equal to `999`")  # noqa: E501
        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `search_devices`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `search_devices`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rdf_type' in params:
            query_params.append(('rdf_type', params['rdf_type']))  # noqa: E501
        if 'include_subtypes' in params:
            query_params.append(('include_subtypes', params['include_subtypes']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'variable' in params:
            query_params.append(('variable', params['variable']))  # noqa: E501
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if 'existence_date' in params:
            query_params.append(('existence_date', params['existence_date']))  # noqa: E501
        if 'facility' in params:
            query_params.append(('facility', params['facility']))  # noqa: E501
        if 'brand' in params:
            query_params.append(('brand', params['brand']))  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serial_number', params['serial_number']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def update_device(
        self,
        body : 'DeviceCreationDTO',
        **kwargs
    ):  # noqa: E501
        """Update a device  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_device(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceCreationDTO body: Device description (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: ObjectUriResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["body", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                body = DeviceCreationDTO(body)
            except:
                body = DeviceCreationDTO(**body.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `DeviceCreationDTO` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.update_device_with_http_info(body, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.update_device_with_http_info(body, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def update_device_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update a device  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_device_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceCreationDTO body: Device description (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: ObjectUriResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ObjectUriResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def validate_csv1(
        self,
        description : 'Object',
        file : 'str',
        **kwargs
    ):  # noqa: E501
        """Validate the import of a CSV file with one device per line  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_csv1(description, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object description: CSV import settings (required)
        :param file file: Device file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["description", "file", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                description = Object(description)
            except:
                description = Object(**description.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `description`. This parameter couldn't be cast to type `Object` \n{0}".format(e))
             
        try:
            file = str(file)
        except ValueError as e:
            raise ValueError("Invalid value for parameter `file`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.validate_csv1_with_http_info(description, file, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_csv1_with_http_info(description, file, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def validate_csv1_with_http_info(self, description, file, **kwargs):  # noqa: E501
        """Validate the import of a CSV file with one device per line  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_csv1_with_http_info(description, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object description: CSV import settings (required)
        :param file file: Device file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['description', 'file', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_csv1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `validate_csv1`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `validate_csv1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/import_validation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSVValidationDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
