# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: BUILD-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from typing import List
from opensilexClientToolsPython.models import *
from datetime import date
import inspect
from opensilexClientToolsPython.api_client import ApiClient


class EventsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        
    def count_events(
        self,
        targets : 'List[str]',
        **kwargs
    ):  # noqa: E501
        """Count events  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_events(targets, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] targets: Targets URIs (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["targets", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                targets = [
                    str(x)
                    for x in targets
                ]
            except:
                targets = [
                    str(**x.to_dict())
                    for x in targets
                ]
        except ValueError as e:
            raise ValueError("Invalid value for parameter `targets`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.count_events_with_http_info(targets, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.count_events_with_http_info(targets, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def count_events_with_http_info(self, targets, **kwargs):  # noqa: E501
        """Count events  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_events_with_http_info(targets, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] targets: Targets URIs (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['targets', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method count_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'targets' is set
        if ('targets' not in params or
                params['targets'] is None):
            raise ValueError("Missing the required parameter `targets` when calling `count_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'targets' in params:
            query_params.append(('targets', params['targets']))  # noqa: E501
            collection_formats['targets'] = 'multi'  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def create_events(
        self,
        body : 'List[EventCreationDTO]' = None,
        **kwargs
    ):  # noqa: E501
        """Create a list of event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_events(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param list[EventCreationDTO] body:
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if body:
            try:
                try:
                    # standard type list
                    body = [
                        EventCreationDTO(x)
                        for x in body
                    ]
                except:
                    # standard type list
                    body = [
                        EventCreationDTO(**x.to_dict())
                        for x in body
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `List[EventCreationDTO]` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.create_events_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.create_events_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def create_events_with_http_info(self, **kwargs):  # noqa: E501
        """Create a list of event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_events_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param list[EventCreationDTO] body:
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_events" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def create_moves(
        self,
        body : 'List[MoveCreationDTO]' = None,
        **kwargs
    ):  # noqa: E501
        """Create a list of move event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_moves(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param list[MoveCreationDTO] body:
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if body:
            try:
                try:
                    # standard type list
                    body = [
                        MoveCreationDTO(x)
                        for x in body
                    ]
                except:
                    # standard type list
                    body = [
                        MoveCreationDTO(**x.to_dict())
                        for x in body
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `List[MoveCreationDTO]` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.create_moves_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.create_moves_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def create_moves_with_http_info(self, **kwargs):  # noqa: E501
        """Create a list of move event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_moves_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param list[MoveCreationDTO] body:
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_moves" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events/moves', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def delete_event(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Delete an event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_event(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Event URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.delete_event_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_event_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def delete_event_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Delete an event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_event_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Event URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `delete_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events/{uri}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def delete_move_event(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Delete a move event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_move_event(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Event URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.delete_move_event_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_move_event_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def delete_move_event_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Delete a move event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_move_event_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Event URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_move_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `delete_move_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events/moves/{uri}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_event(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Get an event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Event URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: EventGetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_event_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_event_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_event_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get an event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Event URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: EventGetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events/{uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventGetDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_event_details(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Get an event with all it's properties  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_details(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Event URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: EventDetailsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_event_details_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_event_details_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_event_details_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get an event with all it's properties  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_details_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Event URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: EventDetailsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_event_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events/{uri}/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventDetailsDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_move_event(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Get a move with all it's properties  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_move_event(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Move URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: MoveDetailsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_move_event_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_move_event_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_move_event_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get a move with all it's properties  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_move_event_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Move URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: MoveDetailsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_move_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_move_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events/moves/{uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MoveDetailsDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def import_event_csv(
        self,
        file : 'str',
        **kwargs
    ):  # noqa: E501
        """Import a CSV file with one move and one target per line  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_event_csv(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: Event file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["file", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            file = str(file)
        except ValueError as e:
            raise ValueError("Invalid value for parameter `file`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.import_event_csv_with_http_info(file, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.import_event_csv_with_http_info(file, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def import_event_csv_with_http_info(self, file, **kwargs):  # noqa: E501
        """Import a CSV file with one move and one target per line  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_event_csv_with_http_info(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: Event file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_event_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `import_event_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSVValidationDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def import_move_csv(
        self,
        file : 'str',
        **kwargs
    ):  # noqa: E501
        """Import a CSV file with one move and one target per line  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_move_csv(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: Move file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["file", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            file = str(file)
        except ValueError as e:
            raise ValueError("Invalid value for parameter `file`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.import_move_csv_with_http_info(file, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.import_move_csv_with_http_info(file, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def import_move_csv_with_http_info(self, file, **kwargs):  # noqa: E501
        """Import a CSV file with one move and one target per line  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_move_csv_with_http_info(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: Move file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_move_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `import_move_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events/moves/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSVValidationDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def search_events(
        self,
        rdf_type : 'str' = None,
        start : 'str' = None,
        end : 'str' = None,
        target : 'str' = None,
        description : 'str' = None,
        order_by : 'List[str]' = None,
        page : 'int' = None,
        page_size : 'int' = None,
        **kwargs
    ):  # noqa: E501
        """Search events  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_events(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str rdf_type: Event type
        :param str start: Start date : match event after the given start date
        :param str end: End date : match event before the given end date
        :param str target: Target partial/exact URI
        :param str description: Description regex pattern
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[EventGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if rdf_type:
            try:
                try:
                    # standard type no list
                    rdf_type = str(rdf_type)
                except:
                    # standard type no list
                    rdf_type = str(**rdf_type.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `rdf_type`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if start:
            try:
                try:
                    # standard type no list
                    start = str(start)
                except:
                    # standard type no list
                    start = str(**start.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `start`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if end:
            try:
                try:
                    # standard type no list
                    end = str(end)
                except:
                    # standard type no list
                    end = str(**end.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `end`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if target:
            try:
                try:
                    # standard type no list
                    target = str(target)
                except:
                    # standard type no list
                    target = str(**target.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `target`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if description:
            try:
                try:
                    # standard type no list
                    description = str(description)
                except:
                    # standard type no list
                    description = str(**description.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `description`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if order_by:
            try:
                try:
                    # standard type list
                    order_by = [
                        str(x)
                        for x in order_by
                    ]
                except:
                    # standard type list
                    order_by = [
                        str(**x.to_dict())
                        for x in order_by
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `order_by`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if page:
            try:
                try:
                    # standard type no list
                    page = int(page)
                except:
                    # standard type no list
                    page = int(**page.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 
        if page_size:
            try:
                try:
                    # standard type no list
                    page_size = int(page_size)
                except:
                    # standard type no list
                    page_size = int(**page_size.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page_size`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.search_events_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.search_events_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def search_events_with_http_info(self, **kwargs):  # noqa: E501
        """Search events  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_events_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str rdf_type: Event type
        :param str start: Start date : match event after the given start date
        :param str end: End date : match event before the given end date
        :param str target: Target partial/exact URI
        :param str description: Description regex pattern
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[EventGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rdf_type', 'start', 'end', 'target', 'description', 'order_by', 'page', 'page_size', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_events" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rdf_type' in params:
            query_params.append(('rdf_type', params['rdf_type']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'target' in params:
            query_params.append(('target', params['target']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EventGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def update_event(
        self,
        body : 'EventUpdateDTO' = None,
        **kwargs
    ):  # noqa: E501
        """Update an event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_event(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param EventUpdateDTO body: Event description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if body:
            try:
                try:
                    # standard type no list
                    body = EventUpdateDTO(body)
                except:
                    # standard type no list
                    body = EventUpdateDTO(**body.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `EventUpdateDTO` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.update_event_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.update_event_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def update_event_with_http_info(self, **kwargs):  # noqa: E501
        """Update an event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_event_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param EventUpdateDTO body: Event description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_event" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def update_move_event(
        self,
        body : 'MoveUpdateDTO' = None,
        **kwargs
    ):  # noqa: E501
        """Update a move event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_move_event(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param MoveUpdateDTO body: Event description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if body:
            try:
                try:
                    # standard type no list
                    body = MoveUpdateDTO(body)
                except:
                    # standard type no list
                    body = MoveUpdateDTO(**body.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `MoveUpdateDTO` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.update_move_event_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.update_move_event_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def update_move_event_with_http_info(self, **kwargs):  # noqa: E501
        """Update a move event  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_move_event_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param MoveUpdateDTO body: Event description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_move_event" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events/moves', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def validate_event_csv(
        self,
        file : 'str',
        **kwargs
    ):  # noqa: E501
        """Check a CSV file with one move and one target per line  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_event_csv(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: Event file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["file", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            file = str(file)
        except ValueError as e:
            raise ValueError("Invalid value for parameter `file`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.validate_event_csv_with_http_info(file, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_event_csv_with_http_info(file, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def validate_event_csv_with_http_info(self, file, **kwargs):  # noqa: E501
        """Check a CSV file with one move and one target per line  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_event_csv_with_http_info(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: Event file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_event_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `validate_event_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events/import_validation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSVValidationDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def validate_move_csv(
        self,
        file : 'str',
        **kwargs
    ):  # noqa: E501
        """Check a CSV file with one move and one target per line  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_move_csv(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: Move file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["file", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            file = str(file)
        except ValueError as e:
            raise ValueError("Invalid value for parameter `file`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.validate_move_csv_with_http_info(file, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_move_csv_with_http_info(file, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def validate_move_csv_with_http_info(self, file, **kwargs):  # noqa: E501
        """Check a CSV file with one move and one target per line  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_move_csv_with_http_info(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: Move file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_move_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `validate_move_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/events/moves/import_validation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSVValidationDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
