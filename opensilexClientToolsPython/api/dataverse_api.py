# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: BUILD-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from typing import List
from opensilexClientToolsPython.models import *
from datetime import date
import inspect
from opensilexClientToolsPython.api_client import ApiClient


class DataverseApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        
    def create_dataset(
        self,
        uri : 'str',
        dataverse_base_path : 'str' = None,
        dataverse_alias : 'str' = None,
        external_api_key : 'str' = None,
        **kwargs
    ):  # noqa: E501
        """Create experiment as a Dataset  # noqa: E501

        To consult the document created use the Document API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dataset(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Experiment URI (required)
        :param str authorization: Authentication token (required)
        :param str dataverse_base_path: Dataverse API base path
        :param str dataverse_alias: Parent dataverse's alias
        :param str external_api_key: Dataverse API key
        :param str accept_language: Request accepted language
        :return: ObjectUriResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             
        if dataverse_base_path:
            try:
                try:
                    # standard type no list
                    dataverse_base_path = str(dataverse_base_path)
                except:
                    # standard type no list
                    dataverse_base_path = str(**dataverse_base_path.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `dataverse_base_path`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if dataverse_alias:
            try:
                try:
                    # standard type no list
                    dataverse_alias = str(dataverse_alias)
                except:
                    # standard type no list
                    dataverse_alias = str(**dataverse_alias.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `dataverse_alias`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if external_api_key:
            try:
                try:
                    # standard type no list
                    external_api_key = str(external_api_key)
                except:
                    # standard type no list
                    external_api_key = str(**external_api_key.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `external_api_key`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.create_dataset_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dataset_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def create_dataset_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Create experiment as a Dataset  # noqa: E501

        To consult the document created use the Document API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dataset_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Experiment URI (required)
        :param str authorization: Authentication token (required)
        :param str dataverse_base_path: Dataverse API base path
        :param str dataverse_alias: Parent dataverse's alias
        :param str external_api_key: Dataverse API key
        :param str accept_language: Request accepted language
        :return: ObjectUriResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'dataverse_base_path', 'dataverse_alias', 'external_api_key', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `create_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'dataverse_base_path' in params:
            query_params.append(('dataverseBasePath', params['dataverse_base_path']))  # noqa: E501
        if 'dataverse_alias' in params:
            query_params.append(('dataverseAlias', params['dataverse_alias']))  # noqa: E501
        if 'external_api_key' in params:
            query_params.append(('externalAPIKey', params['external_api_key']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataverse', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ObjectUriResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
