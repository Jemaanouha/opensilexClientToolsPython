# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: BUILD-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from typing import List
from opensilexClientToolsPython.models import *
from datetime import date
import inspect
from opensilexClientToolsPython.api_client import ApiClient


class ScientificObjectsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        
    def create_scientific_object(
        self,
        body : 'ScientificObjectCreationDTO',
        **kwargs
    ):  # noqa: E501
        """Create a scientific object for the given experiment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_scientific_object(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScientificObjectCreationDTO body: Scientific object description (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["body", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                body = ScientificObjectCreationDTO(body)
            except:
                body = ScientificObjectCreationDTO(**body.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `ScientificObjectCreationDTO` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.create_scientific_object_with_http_info(body, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.create_scientific_object_with_http_info(body, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def create_scientific_object_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a scientific object for the given experiment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_scientific_object_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScientificObjectCreationDTO body: Scientific object description (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_scientific_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_scientific_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def delete_scientific_object(
        self,
        uri : 'str',
        experiment : 'str' = None,
        **kwargs
    ):  # noqa: E501
        """Delete a scientific object  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scientific_object(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: scientific object URI (required)
        :param str authorization: Authentication token (required)
        :param str experiment: Experiment URI
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             
        if experiment:
            try:
                try:
                    # standard type no list
                    experiment = str(experiment)
                except:
                    # standard type no list
                    experiment = str(**experiment.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `experiment`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.delete_scientific_object_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_scientific_object_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def delete_scientific_object_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Delete a scientific object  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scientific_object_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: scientific object URI (required)
        :param str authorization: Authentication token (required)
        :param str experiment: Experiment URI
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'experiment', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_scientific_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `delete_scientific_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects/{uri}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def export_csv(
        self,
        body : 'ScientificObjectExportDTO' = None,
        **kwargs
    ):  # noqa: E501
        """Export a given list of scientific object URIs to csv data file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_csv(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param ScientificObjectExportDTO body: CSV export configuration
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if body:
            try:
                try:
                    # standard type no list
                    body = ScientificObjectExportDTO(body)
                except:
                    # standard type no list
                    body = ScientificObjectExportDTO(**body.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `ScientificObjectExportDTO` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.export_csv_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.export_csv_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def export_csv_with_http_info(self, **kwargs):  # noqa: E501
        """Export a given list of scientific object URIs to csv data file  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_csv_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param ScientificObjectExportDTO body: CSV export configuration
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_csv" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def export_shp(
        self,
        body : 'List[GeometryDTO]' = None,
        experiment : 'str' = None,
        selected_props : 'List[str]' = None,
        page_size : 'int' = None,
        **kwargs
    ):  # noqa: E501
        """Export a given list of scientific object URIs to shapefile  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_shp(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param list[GeometryDTO] body: Scientific objects
        :param str experiment: Experiment URI
        :param list[str] selected_props: properties selected
        :param int page_size: Page size limited to 10,000 objects
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if body:
            try:
                try:
                    # standard type list
                    body = [
                        GeometryDTO(x)
                        for x in body
                    ]
                except:
                    # standard type list
                    body = [
                        GeometryDTO(**x.to_dict())
                        for x in body
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `List[GeometryDTO]` \n{0}".format(e))
                 
        if experiment:
            try:
                try:
                    # standard type no list
                    experiment = str(experiment)
                except:
                    # standard type no list
                    experiment = str(**experiment.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `experiment`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if selected_props:
            try:
                try:
                    # standard type list
                    selected_props = [
                        str(x)
                        for x in selected_props
                    ]
                except:
                    # standard type list
                    selected_props = [
                        str(**x.to_dict())
                        for x in selected_props
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `selected_props`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if page_size:
            try:
                try:
                    # standard type no list
                    page_size = int(page_size)
                except:
                    # standard type no list
                    page_size = int(**page_size.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page_size`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.export_shp_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.export_shp_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def export_shp_with_http_info(self, **kwargs):  # noqa: E501
        """Export a given list of scientific object URIs to shapefile  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_shp_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param list[GeometryDTO] body: Scientific objects
        :param str experiment: Experiment URI
        :param list[str] selected_props: properties selected
        :param int page_size: Page size limited to 10,000 objects
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'experiment', 'selected_props', 'page_size', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_shp" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page_size' in params and params['page_size'] > 10000:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `export_shp`, must be a value less than or equal to `10000`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501
        if 'selected_props' in params:
            query_params.append(('selected_props', params['selected_props']))  # noqa: E501
            collection_formats['selected_props'] = 'multi'  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects/export_shp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_scientific_object_data_files_provenances(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Get provenances of datafiles linked to this scientific object  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scientific_object_data_files_provenances(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Scientific Object URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ProvenanceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_scientific_object_data_files_provenances_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scientific_object_data_files_provenances_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_scientific_object_data_files_provenances_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get provenances of datafiles linked to this scientific object  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scientific_object_data_files_provenances_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Scientific Object URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ProvenanceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scientific_object_data_files_provenances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_scientific_object_data_files_provenances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects/{uri}/datafiles/provenances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProvenanceGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_scientific_object_data_provenances(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Get provenances of data that have been measured on this scientific object  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scientific_object_data_provenances(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Scientific Object URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ProvenanceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_scientific_object_data_provenances_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scientific_object_data_provenances_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_scientific_object_data_provenances_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get provenances of data that have been measured on this scientific object  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scientific_object_data_provenances_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Scientific Object URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ProvenanceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scientific_object_data_provenances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_scientific_object_data_provenances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects/{uri}/data/provenances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProvenanceGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_scientific_object_detail(
        self,
        uri : 'str',
        experiment : 'str' = None,
        **kwargs
    ):  # noqa: E501
        """Get scientific object detail  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scientific_object_detail(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: scientific object URI (required)
        :param str authorization: Authentication token (required)
        :param str experiment: Experiment URI
        :param str accept_language: Request accepted language
        :return: ScientificObjectDetailDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             
        if experiment:
            try:
                try:
                    # standard type no list
                    experiment = str(experiment)
                except:
                    # standard type no list
                    experiment = str(**experiment.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `experiment`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.get_scientific_object_detail_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scientific_object_detail_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_scientific_object_detail_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get scientific object detail  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scientific_object_detail_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: scientific object URI (required)
        :param str authorization: Authentication token (required)
        :param str experiment: Experiment URI
        :param str accept_language: Request accepted language
        :return: ScientificObjectDetailDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'experiment', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scientific_object_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_scientific_object_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects/{uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScientificObjectDetailDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_scientific_object_detail_by_experiments(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Get scientific object detail for each experiments, a null value for experiment in response means a properties defined outside of any experiment (shared object).  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scientific_object_detail_by_experiments(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: scientific object URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ScientificObjectDetailByExperimentsDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_scientific_object_detail_by_experiments_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scientific_object_detail_by_experiments_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_scientific_object_detail_by_experiments_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get scientific object detail for each experiments, a null value for experiment in response means a properties defined outside of any experiment (shared object).  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scientific_object_detail_by_experiments_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: scientific object URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ScientificObjectDetailByExperimentsDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scientific_object_detail_by_experiments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_scientific_object_detail_by_experiments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects/{uri}/experiments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScientificObjectDetailByExperimentsDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_scientific_object_variables(
        self,
        uri : 'str',
        **kwargs
    ):  # noqa: E501
        """Get variables measured on this scientific object  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scientific_object_variables(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Scientific Object URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[NamedResourceDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["uri", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                uri = str(uri)
            except:
                uri = str(**uri.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `uri`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.get_scientific_object_variables_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scientific_object_variables_with_http_info(uri, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_scientific_object_variables_with_http_info(self, uri, **kwargs):  # noqa: E501
        """Get variables measured on this scientific object  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scientific_object_variables_with_http_info(uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Scientific Object URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[NamedResourceDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scientific_object_variables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_scientific_object_variables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects/{uri}/variables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NamedResourceDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_scientific_objects_children(
        self,
        parent : 'str' = None,
        experiment : 'str' = None,
        rdf_types : 'List[str]' = None,
        name : 'str' = None,
        factor_levels : 'List[str]' = None,
        facility : 'str' = None,
        order_by : 'List[str]' = None,
        page : 'int' = None,
        page_size : 'int' = None,
        **kwargs
    ):  # noqa: E501
        """Get list of scientific object children  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scientific_objects_children(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str parent: Parent object URI
        :param str experiment: Experiment URI
        :param list[str] rdf_types: RDF type filter
        :param str name: Regex pattern for filtering by name
        :param list[str] factor_levels: Factor levels URI
        :param str facility: Facility
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[ScientificObjectNodeWithChildrenDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if parent:
            try:
                try:
                    # standard type no list
                    parent = str(parent)
                except:
                    # standard type no list
                    parent = str(**parent.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `parent`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if experiment:
            try:
                try:
                    # standard type no list
                    experiment = str(experiment)
                except:
                    # standard type no list
                    experiment = str(**experiment.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `experiment`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if rdf_types:
            try:
                try:
                    # standard type list
                    rdf_types = [
                        str(x)
                        for x in rdf_types
                    ]
                except:
                    # standard type list
                    rdf_types = [
                        str(**x.to_dict())
                        for x in rdf_types
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `rdf_types`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if name:
            try:
                try:
                    # standard type no list
                    name = str(name)
                except:
                    # standard type no list
                    name = str(**name.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `name`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if factor_levels:
            try:
                try:
                    # standard type list
                    factor_levels = [
                        str(x)
                        for x in factor_levels
                    ]
                except:
                    # standard type list
                    factor_levels = [
                        str(**x.to_dict())
                        for x in factor_levels
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `factor_levels`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if facility:
            try:
                try:
                    # standard type no list
                    facility = str(facility)
                except:
                    # standard type no list
                    facility = str(**facility.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `facility`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if order_by:
            try:
                try:
                    # standard type list
                    order_by = [
                        str(x)
                        for x in order_by
                    ]
                except:
                    # standard type list
                    order_by = [
                        str(**x.to_dict())
                        for x in order_by
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `order_by`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if page:
            try:
                try:
                    # standard type no list
                    page = int(page)
                except:
                    # standard type no list
                    page = int(**page.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 
        if page_size:
            try:
                try:
                    # standard type no list
                    page_size = int(page_size)
                except:
                    # standard type no list
                    page_size = int(**page_size.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page_size`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.get_scientific_objects_children_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scientific_objects_children_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_scientific_objects_children_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of scientific object children  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scientific_objects_children_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str parent: Parent object URI
        :param str experiment: Experiment URI
        :param list[str] rdf_types: RDF type filter
        :param str name: Regex pattern for filtering by name
        :param list[str] factor_levels: Factor levels URI
        :param str facility: Facility
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[ScientificObjectNodeWithChildrenDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parent', 'experiment', 'rdf_types', 'name', 'factor_levels', 'facility', 'order_by', 'page', 'page_size', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scientific_objects_children" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_scientific_objects_children`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_scientific_objects_children`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'parent' in params:
            query_params.append(('parent', params['parent']))  # noqa: E501
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501
        if 'rdf_types' in params:
            query_params.append(('rdf_types', params['rdf_types']))  # noqa: E501
            collection_formats['rdf_types'] = 'multi'  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'factor_levels' in params:
            query_params.append(('factor_levels', params['factor_levels']))  # noqa: E501
            collection_formats['factor_levels'] = 'multi'  # noqa: E501
        if 'facility' in params:
            query_params.append(('facility', params['facility']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScientificObjectNodeWithChildrenDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_scientific_objects_list_by_uris(
        self,
        experiment : 'str' = None,
        body : 'List[str]' = None,
        **kwargs
    ):  # noqa: E501
        """Get scientific objet list of a given experiment URI  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scientific_objects_list_by_uris(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str experiment: Experiment URI
        :param list[str] body: Scientific object uris
        :param str accept_language: Request accepted language
        :return: list[ScientificObjectNodeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if experiment:
            try:
                try:
                    # standard type no list
                    experiment = str(experiment)
                except:
                    # standard type no list
                    experiment = str(**experiment.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `experiment`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if body:
            try:
                try:
                    # standard type list
                    body = [
                        str(x)
                        for x in body
                    ]
                except:
                    # standard type list
                    body = [
                        str(**x.to_dict())
                        for x in body
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.get_scientific_objects_list_by_uris_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scientific_objects_list_by_uris_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_scientific_objects_list_by_uris_with_http_info(self, **kwargs):  # noqa: E501
        """Get scientific objet list of a given experiment URI  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scientific_objects_list_by_uris_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str experiment: Experiment URI
        :param list[str] body: Scientific object uris
        :param str accept_language: Request accepted language
        :return: list[ScientificObjectNodeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment', 'body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scientific_objects_list_by_uris" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects/by_uris', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScientificObjectNodeDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def get_used_types(
        self,
        experiment : 'str' = None,
        **kwargs
    ):  # noqa: E501
        """get used scientific object types  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_used_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str experiment: Experiment URI
        :param str accept_language: Request accepted language
        :return: list[ListItemDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if experiment:
            try:
                try:
                    # standard type no list
                    experiment = str(experiment)
                except:
                    # standard type no list
                    experiment = str(**experiment.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `experiment`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.get_used_types_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.get_used_types_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def get_used_types_with_http_info(self, **kwargs):  # noqa: E501
        """get used scientific object types  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_used_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str experiment: Experiment URI
        :param str accept_language: Request accepted language
        :return: list[ListItemDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_used_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects/used_types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ListItemDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def import_csv1(
        self,
        description : 'str',
        file : 'str',
        **kwargs
    ):  # noqa: E501
        """Import a CSV file for the given experiment URI and scientific object type.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_csv1(description, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str description: File description with metadata (required)
        :param file file: Data file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["description", "file", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                description = str(description)
            except:
                description = str(**description.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `description`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             
        try:
            file = str(file)
        except ValueError as e:
            raise ValueError("Invalid value for parameter `file`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.import_csv1_with_http_info(description, file, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.import_csv1_with_http_info(description, file, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def import_csv1_with_http_info(self, description, file, **kwargs):  # noqa: E501
        """Import a CSV file for the given experiment URI and scientific object type.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_csv1_with_http_info(description, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str description: File description with metadata (required)
        :param file file: Data file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['description', 'file', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_csv1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `import_csv1`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `import_csv1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSVValidationDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def search_scientific_objects(
        self,
        experiment : 'str' = None,
        rdf_types : 'List[str]' = None,
        name : 'str' = None,
        parent : 'str' = None,
        germplasm : 'str' = None,
        factor_levels : 'List[str]' = None,
        facility : 'str' = None,
        existence_date : 'str' = None,
        creation_date : 'str' = None,
        order_by : 'List[str]' = None,
        page : 'int' = None,
        page_size : 'int' = None,
        **kwargs
    ):  # noqa: E501
        """Search list of scientific objects  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_scientific_objects(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str experiment: Experiment URI
        :param list[str] rdf_types: RDF type filter
        :param str name: Regex pattern for filtering by name
        :param str parent: Parent URI
        :param str germplasm: Germplasm URI
        :param list[str] factor_levels: Factor levels URI
        :param str facility: Facility
        :param str existence_date: Date to filter object existence
        :param str creation_date: Date to filter object creation
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[ScientificObjectNodeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in [] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        if experiment:
            try:
                try:
                    # standard type no list
                    experiment = str(experiment)
                except:
                    # standard type no list
                    experiment = str(**experiment.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `experiment`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if rdf_types:
            try:
                try:
                    # standard type list
                    rdf_types = [
                        str(x)
                        for x in rdf_types
                    ]
                except:
                    # standard type list
                    rdf_types = [
                        str(**x.to_dict())
                        for x in rdf_types
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `rdf_types`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if name:
            try:
                try:
                    # standard type no list
                    name = str(name)
                except:
                    # standard type no list
                    name = str(**name.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `name`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if parent:
            try:
                try:
                    # standard type no list
                    parent = str(parent)
                except:
                    # standard type no list
                    parent = str(**parent.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `parent`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if germplasm:
            try:
                try:
                    # standard type no list
                    germplasm = str(germplasm)
                except:
                    # standard type no list
                    germplasm = str(**germplasm.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `germplasm`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if factor_levels:
            try:
                try:
                    # standard type list
                    factor_levels = [
                        str(x)
                        for x in factor_levels
                    ]
                except:
                    # standard type list
                    factor_levels = [
                        str(**x.to_dict())
                        for x in factor_levels
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `factor_levels`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if facility:
            try:
                try:
                    # standard type no list
                    facility = str(facility)
                except:
                    # standard type no list
                    facility = str(**facility.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `facility`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if existence_date:
            try:
                # date type no list
                existence_date = date.fromisoformat(existence_date)
            except ValueError as e:
                raise ValueError("Invalid value for parameter `existence_date`. This parameter couldn't be cast to type `date` \n{0}".format(e))
                 
        if creation_date:
            try:
                # date type no list
                creation_date = date.fromisoformat(creation_date)
            except ValueError as e:
                raise ValueError("Invalid value for parameter `creation_date`. This parameter couldn't be cast to type `date` \n{0}".format(e))
                 
        if order_by:
            try:
                try:
                    # standard type list
                    order_by = [
                        str(x)
                        for x in order_by
                    ]
                except:
                    # standard type list
                    order_by = [
                        str(**x.to_dict())
                        for x in order_by
                    ]
            except ValueError as e:
                raise ValueError("Invalid value for parameter `order_by`. This parameter couldn't be cast to type `List[str]` \n{0}".format(e))
                 
        if page:
            try:
                try:
                    # standard type no list
                    page = int(page)
                except:
                    # standard type no list
                    page = int(**page.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 
        if page_size:
            try:
                try:
                    # standard type no list
                    page_size = int(page_size)
                except:
                    # standard type no list
                    page_size = int(**page_size.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `page_size`. This parameter couldn't be cast to type `int` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.search_scientific_objects_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.search_scientific_objects_with_http_info(**passed_arguments, **kwargs)  # noqa: E501
            return data

    def search_scientific_objects_with_http_info(self, **kwargs):  # noqa: E501
        """Search list of scientific objects  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_scientific_objects_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str experiment: Experiment URI
        :param list[str] rdf_types: RDF type filter
        :param str name: Regex pattern for filtering by name
        :param str parent: Parent URI
        :param str germplasm: Germplasm URI
        :param list[str] factor_levels: Factor levels URI
        :param str facility: Facility
        :param str existence_date: Date to filter object existence
        :param str creation_date: Date to filter object creation
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[ScientificObjectNodeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment', 'rdf_types', 'name', 'parent', 'germplasm', 'factor_levels', 'facility', 'existence_date', 'creation_date', 'order_by', 'page', 'page_size', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_scientific_objects" % key
                )
            params[key] = val
        del params['kwargs']

        if 'page' in params and params['page'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `search_scientific_objects`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'page_size' in params and params['page_size'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `search_scientific_objects`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501
        if 'rdf_types' in params:
            query_params.append(('rdf_types', params['rdf_types']))  # noqa: E501
            collection_formats['rdf_types'] = 'multi'  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'parent' in params:
            query_params.append(('parent', params['parent']))  # noqa: E501
        if 'germplasm' in params:
            query_params.append(('germplasm', params['germplasm']))  # noqa: E501
        if 'factor_levels' in params:
            query_params.append(('factor_levels', params['factor_levels']))  # noqa: E501
            collection_formats['factor_levels'] = 'multi'  # noqa: E501
        if 'facility' in params:
            query_params.append(('facility', params['facility']))  # noqa: E501
        if 'existence_date' in params:
            query_params.append(('existence_date', params['existence_date']))  # noqa: E501
        if 'creation_date' in params:
            query_params.append(('creation_date', params['creation_date']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScientificObjectNodeDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def search_scientific_objects_with_geometry_list_by_uris(
        self,
        experiment : 'str',
        start_date : 'str' = None,
        end_date : 'str' = None,
        **kwargs
    ):  # noqa: E501
        """Get scientific objet list with geometry of a given experiment URI  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_scientific_objects_with_geometry_list_by_uris(experiment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str experiment: Context URI (required)
        :param str authorization: Authentication token (required)
        :param str start_date: Search by minimal date
        :param str end_date: Search by maximal date
        :param str accept_language: Request accepted language
        :return: list[ScientificObjectNodeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["experiment", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                experiment = str(experiment)
            except:
                experiment = str(**experiment.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `experiment`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             
        if start_date:
            try:
                try:
                    # standard type no list
                    start_date = str(start_date)
                except:
                    # standard type no list
                    start_date = str(**start_date.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `start_date`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 
        if end_date:
            try:
                try:
                    # standard type no list
                    end_date = str(end_date)
                except:
                    # standard type no list
                    end_date = str(**end_date.to_dict())
            except ValueError as e:
                raise ValueError("Invalid value for parameter `end_date`. This parameter couldn't be cast to type `str` \n{0}".format(e))
                 


        if kwargs.get('async_req'):
            return self.search_scientific_objects_with_geometry_list_by_uris_with_http_info(experiment, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.search_scientific_objects_with_geometry_list_by_uris_with_http_info(experiment, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def search_scientific_objects_with_geometry_list_by_uris_with_http_info(self, experiment, **kwargs):  # noqa: E501
        """Get scientific objet list with geometry of a given experiment URI  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_scientific_objects_with_geometry_list_by_uris_with_http_info(experiment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str experiment: Context URI (required)
        :param str authorization: Authentication token (required)
        :param str start_date: Search by minimal date
        :param str end_date: Search by maximal date
        :param str accept_language: Request accepted language
        :return: list[ScientificObjectNodeDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['experiment', 'start_date', 'end_date', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_scientific_objects_with_geometry_list_by_uris" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'experiment' is set
        if ('experiment' not in params or
                params['experiment'] is None):
            raise ValueError("Missing the required parameter `experiment` when calling `search_scientific_objects_with_geometry_list_by_uris`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects/geometry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScientificObjectNodeDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def update_scientific_object(
        self,
        body : 'ScientificObjectUpdateDTO',
        **kwargs
    ):  # noqa: E501
        """Update a scientific object for the given experiment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_scientific_object(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScientificObjectUpdateDTO body: Scientific object description (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["body", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                body = ScientificObjectUpdateDTO(body)
            except:
                body = ScientificObjectUpdateDTO(**body.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `body`. This parameter couldn't be cast to type `ScientificObjectUpdateDTO` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.update_scientific_object_with_http_info(body, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.update_scientific_object_with_http_info(body, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def update_scientific_object_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update a scientific object for the given experiment  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_scientific_object_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ScientificObjectUpdateDTO body: Scientific object description (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_scientific_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_scientific_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        
    def validate_csv3(
        self,
        description : 'str',
        file : 'str',
        **kwargs
    ):  # noqa: E501
        """Validate a CSV file for the given experiment URI and scientific object type.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_csv3(description, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str description: File description with metadata (required)
        :param file file: Data file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        frame = inspect.currentframe()
        keys, _, _, values = inspect.getargvalues(frame)
        passed_arguments = {}
        for key in keys:
            if key != 'self' and key not in ["description", "file", ] and values[key] != None:
                passed_arguments[key] = values[key]
        kwargs['_return_http_data_only'] = True

        
        
        try:
            try:
                description = str(description)
            except:
                description = str(**description.to_dict())
        except ValueError as e:
            raise ValueError("Invalid value for parameter `description`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             
        try:
            file = str(file)
        except ValueError as e:
            raise ValueError("Invalid value for parameter `file`. This parameter couldn't be cast to type `str` \n{0}".format(e))
             


        if kwargs.get('async_req'):
            return self.validate_csv3_with_http_info(description, file, **passed_arguments, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_csv3_with_http_info(description, file, **passed_arguments, **kwargs)  # noqa: E501
            return data

    def validate_csv3_with_http_info(self, description, file, **kwargs):  # noqa: E501
        """Validate a CSV file for the given experiment URI and scientific object type.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_csv3_with_http_info(description, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str description: File description with metadata (required)
        :param file file: Data file (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['description', 'file', ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_csv3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `validate_csv3`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `validate_csv3`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        #if 'authorization' in params:
        #    header_params['Authorization'] = params['authorization']  # noqa: E501
        #if 'accept_language' in params:
        #    header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/scientific_objects/import_validation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSVValidationDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
