# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: INSTANCE-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RDFPropertyDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'name': 'str',
        'comment': 'str',
        'domain': 'str',
        'range': 'str',
        'parent': 'str',
        'rdf_type': 'str',
        'name_translations': 'dict(str, str)',
        'comment_translations': 'dict(str, str)',
        'domain_rdf_type': 'str',
        'range_label': 'str'
    }

    attribute_map = {
        'uri': 'uri',
        'name': 'name',
        'comment': 'comment',
        'domain': 'domain',
        'range': 'range',
        'parent': 'parent',
        'rdf_type': 'rdf_type',
        'name_translations': 'name_translations',
        'comment_translations': 'comment_translations',
        'domain_rdf_type': 'domain_rdf_type',
        'range_label': 'range_label'
    }

    def __init__(self, uri=None, name=None, comment=None, domain=None, range=None, parent=None, rdf_type=None, name_translations=None, comment_translations=None, domain_rdf_type=None, range_label=None):  # noqa: E501
        """RDFPropertyDTO - a model defined in Swagger"""  # noqa: E501

        self._uri = None
        self._name = None
        self._comment = None
        self._domain = None
        self._range = None
        self._parent = None
        self._rdf_type = None
        self._name_translations = None
        self._comment_translations = None
        self._domain_rdf_type = None
        self._range_label = None
        self.discriminator = None

        if uri is not None:
            self.uri = uri
        if name is not None:
            self.name = name
        if comment is not None:
            self.comment = comment
        if domain is not None:
            self.domain = domain
        if range is not None:
            self.range = range
        if parent is not None:
            self.parent = parent
        if rdf_type is not None:
            self.rdf_type = rdf_type
        if name_translations is not None:
            self.name_translations = name_translations
        if comment_translations is not None:
            self.comment_translations = comment_translations
        if domain_rdf_type is not None:
            self.domain_rdf_type = domain_rdf_type
        if range_label is not None:
            self.range_label = range_label

    @property
    def uri(self):
        """Gets the uri of this RDFPropertyDTO.  # noqa: E501


        :return: The uri of this RDFPropertyDTO.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this RDFPropertyDTO.


        :param uri: The uri of this RDFPropertyDTO.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def name(self):
        """Gets the name of this RDFPropertyDTO.  # noqa: E501


        :return: The name of this RDFPropertyDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RDFPropertyDTO.


        :param name: The name of this RDFPropertyDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def comment(self):
        """Gets the comment of this RDFPropertyDTO.  # noqa: E501


        :return: The comment of this RDFPropertyDTO.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this RDFPropertyDTO.


        :param comment: The comment of this RDFPropertyDTO.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def domain(self):
        """Gets the domain of this RDFPropertyDTO.  # noqa: E501


        :return: The domain of this RDFPropertyDTO.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this RDFPropertyDTO.


        :param domain: The domain of this RDFPropertyDTO.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def range(self):
        """Gets the range of this RDFPropertyDTO.  # noqa: E501


        :return: The range of this RDFPropertyDTO.  # noqa: E501
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this RDFPropertyDTO.


        :param range: The range of this RDFPropertyDTO.  # noqa: E501
        :type: str
        """

        self._range = range

    @property
    def parent(self):
        """Gets the parent of this RDFPropertyDTO.  # noqa: E501


        :return: The parent of this RDFPropertyDTO.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this RDFPropertyDTO.


        :param parent: The parent of this RDFPropertyDTO.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def rdf_type(self):
        """Gets the rdf_type of this RDFPropertyDTO.  # noqa: E501


        :return: The rdf_type of this RDFPropertyDTO.  # noqa: E501
        :rtype: str
        """
        return self._rdf_type

    @rdf_type.setter
    def rdf_type(self, rdf_type):
        """Sets the rdf_type of this RDFPropertyDTO.


        :param rdf_type: The rdf_type of this RDFPropertyDTO.  # noqa: E501
        :type: str
        """

        self._rdf_type = rdf_type

    @property
    def name_translations(self):
        """Gets the name_translations of this RDFPropertyDTO.  # noqa: E501


        :return: The name_translations of this RDFPropertyDTO.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._name_translations

    @name_translations.setter
    def name_translations(self, name_translations):
        """Sets the name_translations of this RDFPropertyDTO.


        :param name_translations: The name_translations of this RDFPropertyDTO.  # noqa: E501
        :type: dict(str, str)
        """

        self._name_translations = name_translations

    @property
    def comment_translations(self):
        """Gets the comment_translations of this RDFPropertyDTO.  # noqa: E501


        :return: The comment_translations of this RDFPropertyDTO.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._comment_translations

    @comment_translations.setter
    def comment_translations(self, comment_translations):
        """Sets the comment_translations of this RDFPropertyDTO.


        :param comment_translations: The comment_translations of this RDFPropertyDTO.  # noqa: E501
        :type: dict(str, str)
        """

        self._comment_translations = comment_translations

    @property
    def domain_rdf_type(self):
        """Gets the domain_rdf_type of this RDFPropertyDTO.  # noqa: E501


        :return: The domain_rdf_type of this RDFPropertyDTO.  # noqa: E501
        :rtype: str
        """
        return self._domain_rdf_type

    @domain_rdf_type.setter
    def domain_rdf_type(self, domain_rdf_type):
        """Sets the domain_rdf_type of this RDFPropertyDTO.


        :param domain_rdf_type: The domain_rdf_type of this RDFPropertyDTO.  # noqa: E501
        :type: str
        """

        self._domain_rdf_type = domain_rdf_type

    @property
    def range_label(self):
        """Gets the range_label of this RDFPropertyDTO.  # noqa: E501


        :return: The range_label of this RDFPropertyDTO.  # noqa: E501
        :rtype: str
        """
        return self._range_label

    @range_label.setter
    def range_label(self, range_label):
        """Sets the range_label of this RDFPropertyDTO.


        :param range_label: The range_label of this RDFPropertyDTO.  # noqa: E501
        :type: str
        """

        self._range_label = range_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RDFPropertyDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RDFPropertyDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
